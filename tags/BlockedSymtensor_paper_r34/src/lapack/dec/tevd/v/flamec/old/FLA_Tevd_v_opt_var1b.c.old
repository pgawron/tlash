/*
   libflame
   An object-based infrastructure for developing high-performance
   dense linear algebra libraries.

   Copyright (C) 2011, The University of Texas

   libflame is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   libflame is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with libflame; if you did not receive a copy, see
   http://www.gnu.org/licenses/.

   For more information, please contact us at flame@cs.utexas.edu or
   send mail to:

   Field G. Van Zee and/or
   Robert A. van de Geijn
   The University of Texas at Austin
   Department of Computer Sciences
   1 University Station C0500
   Austin TX 78712
*/

#include "FLAME.h"

FLA_Error FLA_Tevd_v_opt_var1b( FLA_Obj U, FLA_Obj d, FLA_Obj e, FLA_Obj l )
{
	FLA_Datatype datatype;
	int          m_A;
	int          rs_U, cs_U;
	int          inc_d;
	int          inc_e;
	int          inc_l;

	datatype = FLA_Obj_datatype( U );

	m_A      = FLA_Obj_length( U );

	rs_U     = FLA_Obj_row_stride( U );
	cs_U     = FLA_Obj_col_stride( U );

	inc_d    = FLA_Obj_vector_inc( d );
	inc_e    = FLA_Obj_vector_inc( e );
	
	inc_l    = FLA_Obj_vector_inc( l );


	switch ( datatype )
	{
		case FLA_FLOAT:
		{
			float*    buff_U = FLA_FLOAT_PTR( U );
			float*    buff_d = FLA_FLOAT_PTR( d );
			float*    buff_e = FLA_FLOAT_PTR( e );
			float*    buff_l = FLA_FLOAT_PTR( l );

			FLA_Tevd_v_ops_var1b( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}

		case FLA_DOUBLE:
		{
			double*   buff_U = FLA_DOUBLE_PTR( U );
			double*   buff_d = FLA_DOUBLE_PTR( d );
			double*   buff_e = FLA_DOUBLE_PTR( e );
			double*   buff_l = FLA_DOUBLE_PTR( l );

			FLA_Tevd_v_opd_var1b( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}

		case FLA_COMPLEX:
		{
			scomplex* buff_U = FLA_COMPLEX_PTR( U );
			float*    buff_d = FLA_FLOAT_PTR( d );
			float*    buff_e = FLA_FLOAT_PTR( e );
			float*    buff_l = FLA_FLOAT_PTR( l );

			FLA_Tevd_v_opc_var1b( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}

		case FLA_DOUBLE_COMPLEX:
		{
			dcomplex* buff_U = FLA_DOUBLE_COMPLEX_PTR( U );
			double*   buff_d = FLA_DOUBLE_PTR( d );
			double*   buff_e = FLA_DOUBLE_PTR( e );
			double*   buff_l = FLA_DOUBLE_PTR( l );

			FLA_Tevd_v_opz_var1b( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}
	}

	return FLA_SUCCESS;
}



FLA_Error FLA_Tevd_v_ops_var1b( int       m_A,
                               float*    buff_U, int rs_U, int cs_U,
                               float*    buff_d, int inc_d, 
                               float*    buff_e, int inc_e,
                               float*    buff_l, int inc_l )
{
	return FLA_SUCCESS;
}



FLA_Error FLA_Tevd_v_opd_var1b( int       m_A,
                               double*   buff_U, int rs_U, int cs_U,
                               double*   buff_d, int inc_d, 
                               double*   buff_e, int inc_e,
                               double*   buff_l, int inc_l )
{
	return FLA_SUCCESS;
}

FLA_Error FLA_Tevd_v_opc_var1b( int       m_A,
                               scomplex* buff_U, int rs_U, int cs_U,
                               float*    buff_d, int inc_d, 
                               float*    buff_e, int inc_e,
                               float*    buff_l, int inc_l )
{
	return FLA_SUCCESS;
}

FLA_Error FLA_Tevd_v_opz_var1b( int       m_A,
                               dcomplex* buff_U, int rs_U, int cs_U,
                               double*   buff_d, int inc_d, 
                               double*   buff_e, int inc_e,
                               double*   buff_l, int inc_l )
{
	double** buff_C;
	double** buff_S;
	int*     k;
	double  gamma, sigma;
	int     m_CS, n_CS;
	int     n_iter_max = 5;
	int     i;

	// Allocate the C and S matrices to store the Givens rotations
	// for each eigenvalue found.
/*
	m_CS   = m_A - 1;
	n_CS   = n_iter_max;
	rs_CS  = 1;
	cs_CS  = m_CS;
	buff_C = bli_dallocm( m_CS, n_CS );
	buff_S = bli_dallocm( m_CS, n_CS );
*/
	k      = bli_iallocv( m_A );
	buff_C = bli_vallocv( m_A, sizeof( double* ) );
	buff_S = bli_vallocv( m_A, sizeof( double* ) );
	for ( i = 0; i < m_A; ++i )
	{
		m_CS   = i + 1;
		n_CS   = n_iter_max;
		buff_C[i] = bli_dallocm( m_CS, n_CS );
		buff_S[i] = bli_dallocm( m_CS, n_CS );
	}

	for ( i = m_A - 1; i > 1; --i )
	{
		int m_tl   = i + 1;
		int rs_CS  = 1;
		int cs_CS  = i + 1;

		/*------------------------------------------------------------*/

		// Find an eigenvalue of the top-left m_tl-by-m_tl matrix.
		FLA_Eigval_v_opd_var1( m_tl,
		                       n_CS,
		                       buff_C[i], rs_CS, cs_CS,
		                       buff_S[i], rs_CS, cs_CS,
		                       buff_d, inc_d,
		                       buff_e, inc_e,
		                       &k[i] );

		/*------------------------------------------------------------*/
	}

	for ( i = m_A - 1; i > 1; --i )
	{
		int m_tl   = i + 1;
		int rs_CS  = 1;
		int cs_CS  = i + 1;

		// Apply the Givens rotations to update the eigenvectors.
		//FLA_Apply_G_rf_opz_var2( k[i],
		FLA_Apply_G_rf_blz_var2( k[i],
		                         m_A,
		                         m_tl,
		                         buff_C[i], rs_CS, cs_CS,
		                         buff_S[i], rs_CS, cs_CS,
		                         buff_U,    rs_U,  cs_U,
		                         64 );
	}

	// Find the eigenvalue decomposition of the remaining 2x2 matrix.
	FLA_Hevv_2x2_opd( buff_d + (0  )*inc_d,
	                  buff_e + (0  )*inc_e,
	                  buff_d + (1  )*inc_d,
	                  buff_d + (0  )*inc_d,
	                  buff_d + (1  )*inc_d,
	                  &gamma,
	                  &sigma );

	// Update the eigenvectors.
	FLA_Apply_G_mx2_opz( m_A,
	                     &gamma,
	                     &sigma,
	                     buff_U + (0  )*cs_U, rs_U,
	                     buff_U + (1  )*cs_U, rs_U );

	// Store the eigenvalues to l.
	bli_dcopyv( BLIS_NO_CONJUGATE,
	            m_A,
	            buff_d, inc_d,
	            buff_l, inc_l );

	// Free the C and S matrices.
	for ( i = 0; i < m_A; ++i )
	{
		bli_dfree( buff_C[i] );
		bli_dfree( buff_S[i] );
	}
	bli_ifree( k );
	bli_vfree( buff_C );
	bli_vfree( buff_S );

	return FLA_SUCCESS;
}
