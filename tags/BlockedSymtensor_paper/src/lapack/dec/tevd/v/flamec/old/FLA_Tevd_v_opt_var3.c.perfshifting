/*
   libflame
   An object-based infrastructure for developing high-performance
   dense linear algebra libraries.

   Copyright (C) 2011, The University of Texas

   libflame is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   libflame is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with libflame; if you did not receive a copy, see
   http://www.gnu.org/licenses/.

   For more information, please contact us at flame@cs.utexas.edu or
   send mail to:

   Field G. Van Zee and/or
   Robert A. van de Geijn
   The University of Texas at Austin
   Department of Computer Sciences
   1 University Station C0500
   Austin TX 78712
*/

#include "FLAME.h"

FLA_Error FLA_Tevd_v_opt_var2( FLA_Obj U, FLA_Obj d, FLA_Obj e, FLA_Obj l )
{
	FLA_Datatype datatype;
	int          m_A;
	int          rs_U, cs_U;
	int          inc_d;
	int          inc_e;
	int          inc_l;

	datatype = FLA_Obj_datatype( U );

	m_A      = FLA_Obj_length( U );

	rs_U     = FLA_Obj_row_stride( U );
	cs_U     = FLA_Obj_col_stride( U );

	inc_d    = FLA_Obj_vector_inc( d );
	inc_e    = FLA_Obj_vector_inc( e );
	
	inc_l    = FLA_Obj_vector_inc( l );


	switch ( datatype )
	{
		case FLA_FLOAT:
		{
			float*    buff_U = FLA_FLOAT_PTR( U );
			float*    buff_d = FLA_FLOAT_PTR( d );
			float*    buff_e = FLA_FLOAT_PTR( e );
			float*    buff_l = FLA_FLOAT_PTR( l );

			FLA_Tevd_v_ops_var2( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}

		case FLA_DOUBLE:
		{
			double*   buff_U = FLA_DOUBLE_PTR( U );
			double*   buff_d = FLA_DOUBLE_PTR( d );
			double*   buff_e = FLA_DOUBLE_PTR( e );
			double*   buff_l = FLA_DOUBLE_PTR( l );

			FLA_Tevd_v_opd_var2( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}

		case FLA_COMPLEX:
		{
			scomplex* buff_U = FLA_COMPLEX_PTR( U );
			float*    buff_d = FLA_FLOAT_PTR( d );
			float*    buff_e = FLA_FLOAT_PTR( e );
			float*    buff_l = FLA_FLOAT_PTR( l );

			FLA_Tevd_v_opc_var2( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}

		case FLA_DOUBLE_COMPLEX:
		{
			dcomplex* buff_U = FLA_DOUBLE_COMPLEX_PTR( U );
			double*   buff_d = FLA_DOUBLE_PTR( d );
			double*   buff_e = FLA_DOUBLE_PTR( e );
			double*   buff_l = FLA_DOUBLE_PTR( l );

			FLA_Tevd_v_opz_var2( m_A,
			                     buff_U, rs_U, cs_U,
			                     buff_d, inc_d,
			                     buff_e, inc_e,
			                     buff_l, inc_l );

			break;
		}
	}

	return FLA_SUCCESS;
}



FLA_Error FLA_Tevd_v_ops_var2( int       m_A,
                               float*    buff_U, int rs_U, int cs_U,
                               float*    buff_d, int inc_d, 
                               float*    buff_e, int inc_e,
                               float*    buff_l, int inc_l )
{
	return FLA_SUCCESS;
}



FLA_Error FLA_Tevd_v_opd_var2( int       m_A,
                               double*   buff_U, int rs_U, int cs_U,
                               double*   buff_d, int inc_d, 
                               double*   buff_e, int inc_e,
                               double*   buff_l, int inc_l )
{
	return FLA_SUCCESS;
}

FLA_Error FLA_Tevd_v_opc_var2( int       m_A,
                               scomplex* buff_U, int rs_U, int cs_U,
                               float*    buff_d, int inc_d, 
                               float*    buff_e, int inc_e,
                               float*    buff_l, int inc_l )
{
	return FLA_SUCCESS;
}

FLA_Error FLA_Tevd_v_opz_var2( int       m_A,
                               dcomplex* buff_U, int rs_U, int cs_U,
                               double*   buff_d, int inc_d, 
                               double*   buff_e, int inc_e,
                               double*   buff_l, int inc_l )
{
	double* buff_C;
	double* buff_S;
	double* d_copy;
	double* e_copy;
	double  gamma, sigma;
	int     m_CS, n_CS;
	int     rs_CS, cs_CS;
	int     n_iter_max = 30;
	int     i, j, k, ir;
	int     k_total = 0;
	int     k_weight = 0;

	// Allocate vectors conformal to d and e.
	d_copy = bli_dallocv( m_A );
	e_copy = bli_dallocv( m_A-1 );

	// Save the original contents of d and e.
	bli_dcopyv( BLIS_NO_CONJUGATE,
	            m_A,
	            buff_d, inc_d,
	            d_copy, 1 );
	bli_dcopyv( BLIS_NO_CONJUGATE,
	            m_A-1,
	            buff_e, inc_e,
	            e_copy, 1 );

	FLA_Tevd_n_opz_var1( m_A,
	                     d_copy, 1,
	                     e_copy, 1,
	                     buff_l, inc_l );
	FLA_Sort_f_opd( m_A,
	                buff_l, inc_l );

	// Allocate the C and S matrices to store the Givens rotations
	// for each eigenvalue found.
	m_CS   = m_A - 1;
	n_CS   = n_iter_max;
	rs_CS  = 1;
	cs_CS  = m_CS;
	buff_C = bli_dallocm( m_CS, n_CS );
	buff_S = bli_dallocm( m_CS, n_CS );
	
	for ( i = m_A - 1, ir = 0; i > 1; --i, ++ir )
	{
		double* buff_shift = buff_l + (ir )*inc_l;
		int     m_tl       = i + 1;
		double* d_last     = &buff_d[ i*inc_d ];

/*
		for ( j = 0; j < m_A - 1; ++j )
		{
			if ( fabs( *d_last - buff_l[ j*inc_l ] ) < cand_diff )
			{
				cand_diff = fabs( *d_last - buff_l[ j*inc_l ] );
				cand_shift = &buff_l[ j*inc_l ];
			}
		}
		buff_shift = cand_shift;
*/
//printf( "FLA_Tevd_v_opz_var2: d_last  is %5.1f\n", *d_last );
//printf( "FLA_Tevd_v_opz_var2: settled on %5.1f as shift\n", *buff_shift );

		/*------------------------------------------------------------*/

		// Find an eigenvalue of the top-left m_tl-by-m_tl matrix.
		FLA_Eigval_v_opd_var2( m_tl,
		                       n_CS,
		                       buff_shift,
		                       buff_C, rs_CS, cs_CS,
		                       buff_S, rs_CS, cs_CS,
		                       buff_d, inc_d,
		                       buff_e, inc_e,
		                       &k );
		k_total += k;
		k_weight += i * k;

//printf( "FLA_Tevd_v_opz_var2: found eig  %14.11f in col %3d after %3d iterations\n", buff_d[ i*inc_d ], i, k );

		// Apply the Givens rotations to update the eigenvectors.
		//FLA_Apply_G_rf_opz_var1( k,
		FLA_Apply_G_rf_opz_var2( k,
		                         m_A,
		                         m_tl,
		                         buff_C, rs_CS, cs_CS,
		                         buff_S, rs_CS, cs_CS,
		                         buff_U, rs_U,  cs_U );

		/*------------------------------------------------------------*/
	}
printf( "FLA_Tevd_v_opz_var2: total iter:        %d\n", k_total );
printf( "FLA_Tevd_v_opz_var2: weighted avg iter: %.3f\n", ( double ) k_weight / ( m_A * m_A / 2 ) );

	// Find the eigenvalue decomposition of the remaining 2x2 matrix.
	FLA_Hevv_2x2_opd( buff_d + (0  )*inc_d,
	                  buff_e + (0  )*inc_e,
	                  buff_d + (1  )*inc_d,
	                  buff_d + (0  )*inc_d,
	                  buff_d + (1  )*inc_d,
	                  &gamma,
	                  &sigma );

	// Update the eigenvectors.
	FLA_Apply_G_mx2_opz( m_A,
	                     &gamma,
	                     &sigma,
	                     buff_U + (0  )*cs_U, rs_U,
	                     buff_U + (1  )*cs_U, rs_U );

	// Store the eigenvalues to l.
	bli_dcopyv( BLIS_NO_CONJUGATE,
	            m_A,
	            buff_d, inc_d,
	            buff_l, inc_l );

	// Free the C and S matrices.
	bli_dfree( buff_C );
	bli_dfree( buff_S );

	// Free the copies of d and e.
	bli_dfree( d_copy );
	bli_dfree( e_copy );

	return FLA_SUCCESS;
}
