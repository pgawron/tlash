m4trace:build/ac-macros/fla_check_enable_blas3_front_end_cntl_trees.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_BLAS3_FRONT_END_CNTL_TREES], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling level-3 BLAS front end control trees])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([blas3-front-end-cntl-trees],
	              AC_HELP_STRING([--enable-blas3-front-end-cntl-trees],[Enable code that uses control trees to select a reasonable variant and blocksize when level-3 BLAS front-ends are invoked. When disabled, the front-ends invoke their corresponding external implementations. Note that control trees are always used for LAPACK-like operations. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_blas3_front_end_cntl_trees=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_blas3_front_end_cntl_trees=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in CHECK_ENABLE_BLAS3_FRONT_END_CNTL_TREES!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option
		dnl Default behavior is to disable this feature.
		fla_enable_blas3_front_end_cntl_trees=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_blas3_front_end_cntl_trees" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_BLAS3_FRONT_END_CNTL_TREES,1,
		          [Determines whether to use control trees to select a reasonable FLAME variant and blocksize when level-3 BLAS front-ends are invoked.])
		
	elif test "$fla_enable_blas3_front_end_cntl_trees" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_NON_CRITICAL_CODE!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_blas3_front_end_cntl_trees)

])
m4trace:build/ac-macros/fla_check_enable_blis_use_of_fla_malloc.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_BLIS_USE_OF_FLA_MALLOC], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling code that defines bli_malloc() in terms of FLA_malloc()])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([blis-use-of-fla-malloc],
	              AC_HELP_STRING([--enable-blis-use-of-fla-malloc],[Enable code that defines bli_malloc() in terms of FLA_malloc(). One benefit of this is that BLIS memory allocations can be tracked, along with other libflame memory allocations, if the memory leak counter is enabled. A second benefit is that BLIS memory allocations can be aligned to boundaries if libflame memory alignment is enabled. Note this option may only be set at configure-time. (Enabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_blis_use_of_fla_malloc=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_blis_use_of_fla_malloc=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_BLIS_USE_OF_FLA_MALLOC!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to enable the option.
		fla_enable_blis_use_of_fla_malloc=yes
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_blis_use_of_fla_malloc" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_BLIS_USE_OF_FLA_MALLOC,1,
		          [Determines whether to define bli_malloc() in terms of FLA_malloc().])
		
	elif test "$fla_enable_blis_use_of_fla_malloc" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_BLIS_USE_OF_FLA_MALLOC!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_blis_use_of_fla_malloc)

])
m4trace:build/ac-macros/fla_check_enable_builtin_blas.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_BUILTIN_BLAS], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested a built-in BLAS implementation])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([builtin-blas],
	              AC_HELP_STRING([--enable-builtin-blas],[Enable code that provides a built-in implementation of the BLAS. Note that some routines may not be optimized yet. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then

			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_builtin_blas=no

		elif test "$enableval" = "yes" ; then

			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_builtin_blas=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_BUILTIN_BLAS!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_builtin_blas=no
	]
	)

	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_builtin_blas" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_BUILTIN_BLAS,1,
		          [Determines whether a built-in implementation of the BLAS is compiled.])
		
	elif test "$fla_enable_builtin_blas" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_BUILTIN_BLAS!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_builtin_blas)

])
m4trace:build/ac-macros/fla_check_enable_cblas_interfaces.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_CBLAS_INTERFACES], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested using the CBLAS interfaces])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([cblas-interfaces],
	              AC_HELP_STRING([--enable-cblas-interfaces],[Enable code that interfaces libflame's external wrapper routines to the BLAS via the CBLAS rather than the traditional Fortran-77 API. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_cblas_interfaces=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_cblas_interfaces=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_CBLAS_INTERFACES!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_cblas_interfaces=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_cblas_interfaces" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_CBLAS_INTERFACES,1,
		          [Determines whether to enable CBLAS interfaces instead of Fortran-77 interfaces to the BLAS.])
		
	elif test "$fla_enable_cblas_interfaces" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_CBLAS_INTERFACES!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_cblas_interfaces)

])
m4trace:build/ac-macros/fla_check_enable_debug.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_DEBUG], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether to enable compiler debugging symbols])

	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([debug],
	              AC_HELP_STRING([--enable-debug],[Use the appropriate debug flag (usually -g) when compiling C and Fortran source code. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
		
			dnl User provided --enable-<option>=no or --disable-<option>.	
			fla_enable_compiler_debug=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_compiler_debug=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_DEBUG!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_compiler_debug=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_compiler_debug" = "yes" ; then

		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_compiler_debug" = "no" ; then

		dnl Output the result.
		AC_MSG_RESULT([no])

	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_DEBUG!]])
	fi

	dnl Set the appropriate debug flags
	FLA_SET_C_DEBUG_FLAGS($fla_enable_compiler_debug)
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_compiler_debug)

])
m4trace:build/ac-macros/fla_check_enable_default_k_blocksize.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_DEFAULT_K_BLOCKSIZE], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested specific default blocksize in k dimension])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([default_k_blocksize],
	              [  --enable-default-k-blocksize=kb],
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" || test "$enableval" = "0" ; then
			
			dnl User provided --enable-<option>=no or --enable-<option>=0.
			AC_MSG_ERROR([[Invalid option to --enable-default-k-blocksize]])

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes.
			AC_MSG_ERROR([[Invalid option to --enable-default-k-blocksize]])
		else
			
			dnl User provided a valid argument (hopefully).
			fla_enable_default_k_blocksize=yes
			fla_default_k_blocksize=$enableval
		fi
		
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_default_k_blocksize=no
	]
	)

	dnl Now act according to whether the option was requested.
	if test "$fla_enable_default_k_blocksize" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Enable option by setting a corresponding preprocessor directive
		dnl to the requested value.
		AC_DEFINE_UNQUOTED(FLA_DEFAULT_K_BLOCKSIZE,$fla_default_k_blocksize,
		                   [Sets the default blocksize in the k dimension.])

		dnl Tell the user we're checking the value given.
		AC_MSG_CHECKING([user-requested k dimension blocksize])
		AC_MSG_RESULT([$fla_default_k_blocksize])
		
		dnl Substitute output variable values.
		AC_SUBST(fla_enable_default_k_blocksize)
		AC_SUBST(fla_default_k_blocksize)

	else

		dnl Output the result.
		AC_MSG_RESULT([no])
	fi
])
m4trace:build/ac-macros/fla_check_enable_default_m_blocksize.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_DEFAULT_M_BLOCKSIZE], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested specific default blocksize in m dimension])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([default_m_blocksize],
	              [  --enable-default-m-blocksize=mb],
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" || test "$enableval" = "0" ; then
			
			dnl User provided --enable-<option>=no or --enable-<option>=0.
			AC_MSG_ERROR([[Invalid option to --enable-default-m-blocksize]])

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes.
			AC_MSG_ERROR([[Invalid option to --enable-default-m-blocksize]])
		else
			
			dnl User provided a valid argument (hopefully).
			fla_enable_default_m_blocksize=yes
			fla_default_m_blocksize=$enableval
		fi
		
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_default_m_blocksize=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if test "$fla_enable_default_m_blocksize" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Enable option by setting a corresponding preprocessor directive
		dnl to the requested value.
		AC_DEFINE_UNQUOTED(FLA_DEFAULT_M_BLOCKSIZE,$fla_default_m_blocksize,
		                   [Sets the default blocksize in the m dimension.])

		dnl Tell the user we're checking the value given.
		AC_MSG_CHECKING([user-requested m dimension blocksize])
		AC_MSG_RESULT([$fla_default_m_blocksize])
		
		dnl Substitute output variable values.
		AC_SUBST(fla_enable_default_m_blocksize)
		AC_SUBST(fla_default_m_blocksize)

	else

		dnl Output the result.
		AC_MSG_RESULT([no])
	fi
])
m4trace:build/ac-macros/fla_check_enable_default_n_blocksize.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_DEFAULT_N_BLOCKSIZE], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested specific default blocksize in n dimension])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([default_n_blocksize],
	              AC_HELP_STRING([--enable-default-n-blocksize=nb],[Enable user-defined blocksizes in the m, k and n dimensions. These options may be used to define the blocksizes that will be returned from blocksize query functions when libgoto interfaces are disabled. Note that they have no effect when libgoto interfaces are enabled. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" || test "$enableval" = "0" ; then
			
			dnl User provided --enable-<option>=no or --enable-<option>=0.
			AC_MSG_ERROR([[Invalid option to --enable-default-n-blocksize]])

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes.
			AC_MSG_ERROR([[Invalid option to --enable-default-n-blocksize]])
		else
			
			dnl User provided a valid argument (hopefully).
			fla_enable_default_n_blocksize=yes
			fla_default_n_blocksize=$enableval
		fi
		
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_default_n_blocksize=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if test "$fla_enable_default_n_blocksize" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Enable option by setting a corresponding preprocessor directive
		dnl to the requested value.
		AC_DEFINE_UNQUOTED(FLA_DEFAULT_N_BLOCKSIZE,$fla_default_n_blocksize,
		                   [Sets the default blocksize in the n dimension.])

		dnl Tell the user we're checking the value given.
		AC_MSG_CHECKING([user-requested n dimension blocksize])
		AC_MSG_RESULT([$fla_default_n_blocksize])
		
		dnl Substitute output variable values.
		AC_SUBST(fla_enable_default_n_blocksize)
		AC_SUBST(fla_default_n_blocksize)

	else

		dnl Output the result.
		AC_MSG_RESULT([no])
	fi
])
m4trace:build/ac-macros/fla_check_enable_dynamic_build.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_DYNAMIC_BUILD], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested building a dynamic library])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([dynamic-build],
	              AC_HELP_STRING([--enable-dynamic-build],[Enable dynamic/shared library generation. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_dynamic_build=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_dynamic_build=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_DYNAMIC_BUILD!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_dynamic_build=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_dynamic_build" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_dynamic_build" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_DYNAMIC_BUILD!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_dynamic_build)

])
m4trace:build/ac-macros/fla_check_enable_external_lapack_for_subproblems.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling external LAPACK for small subproblems])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([external-lapack-for-subproblems],
	              AC_HELP_STRING([--enable-external-lapack-for-subproblems],[Enable code that causes most of the computationally-intensive functions within libflame to compute their smallest subproblems by invoking a corresponding (usually unblocked) LAPACK routine. Note that if this option is enabled, lapack2flame MUST be disabled. Also, if this option is enabled, then external-lapack-interfaces MUST also be enabled. Enabling this option is useful when a libflame user wishes to leverage an optimized external implementation of LAPACK to speed up the b-by-b subproblems that arise within libflame's blocked algorithms and algorithms-by-blocks. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_external_lapack_for_subproblems=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_external_lapack_for_subproblems=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_external_lapack_for_subproblems=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_external_lapack_for_subproblems" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS,1,
		          [Determines whether to enable external LAPACK for small subproblems.])
		
	elif test "$fla_enable_external_lapack_for_subproblems" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_external_lapack_for_subproblems)

])
m4trace:build/ac-macros/fla_check_enable_external_lapack_interfaces.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_EXTERNAL_LAPACK_INTERFACES], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling interfaces to external LAPACK routines])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([external-lapack-interfaces],
	              AC_HELP_STRING([--enable-external-lapack-interfaces],[Enable code that allows the user to interface with an external LAPACK implementation via object-based FLAME-like functions. Note that if this option is enabled, an LAPACK library will be required at link-time. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_external_lapack_interfaces=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_external_lapack_interfaces=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_EXTERNAL_LAPACK_INTERFACES!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_external_lapack_interfaces=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_external_lapack_interfaces" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_EXTERNAL_LAPACK_INTERFACES,1,
		          [Determines whether to enable interfaces to external LAPACK routines.])
		
	elif test "$fla_enable_external_lapack_interfaces" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_EXTERNAL_LAPACK_INTERFACES!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_external_lapack_interfaces)

])
m4trace:build/ac-macros/fla_check_enable_goto_interfaces.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_GOTO_INTERFACES], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling interfaces to internal/low-level libgoto functionality])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([goto-interfaces],
	              AC_HELP_STRING([--enable-goto-interfaces],[Enable code that interfaces with internal/low-level functionality within GotoBLAS, such as those symbols that may be queried for architecture-dependent blocksize values. When this option is disabled, reasonable static values are used instead. Note that in order to use libflame with a BLAS library other than GotoBLAS, the user must disable this option. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_goto_interfaces=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_goto_interfaces=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_GOTO_INTERFACES!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_goto_interfaces=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_goto_interfaces" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_GOTO_INTERFACES,1,
		          [Determines whether to enable interfaces to internal/low-level libgoto symbols.])
		
	elif test "$fla_enable_goto_interfaces" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_GOTO_INTERFACES!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_goto_interfaces)

])
m4trace:build/ac-macros/fla_check_enable_gpu.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_GPU], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested GPU extensions])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([gpu],
	              AC_HELP_STRING([--enable-gpu],[Enable code that takes advantage of GPUs when performing certain computations. If enabled, SuperMatrix must also be enabled. Note that this option is experimental. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then

			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_gpu=no

		elif test "$enableval" = "yes" ; then

			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_gpu=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_GPU!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_gpu=no
	]
	)

	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_gpu" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_GPU,1,
		          [Determines whether GPU-specific blocks of code should be compiled.])
		
	elif test "$fla_enable_gpu" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_GPU!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_gpu)

])
m4trace:build/ac-macros/fla_check_enable_internal_error_checking.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_INTERNAL_ERROR_CHECKING], [
	dnl Initialize some variables.
	fla_enable_internal_error_checking=no
	fla_internal_error_checking_level=none
	
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested support for internal error checking])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([internal-error-checking],
	              AC_HELP_STRING([--enable-internal-error-checking=level],[Enable various internal runtime checks of function parameters and object properties to prevent functions from executing with unexpected values. Note that this option determines the default level, which may be changed at runtime. Valid values for level are "full", "minimal", and "none". (Enabled by default to "full".)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "full" ; then
			
			dnl Enable with OpenMP support.
			fla_enable_internal_error_checking=yes
			fla_internal_error_checking_level=full

		elif test "$enableval" = "minimal" ; then
			
			dnl Enable with POSIX threads support.
			fla_enable_internal_error_checking=yes
			fla_internal_error_checking_level=minimal

		elif test "$enableval" = "none" ; then
			
			dnl Disable internal error checking.
			fla_enable_internal_error_checking=no
			fla_internal_error_checking_level=none

		else
			
			dnl Invalid option.
			AC_MSG_ERROR([[Invalid option to --enable-internal-error-checking. Valid options are "full", "minimal", and "none".]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_internal_error_checking=yes
		fla_internal_error_checking_level=full
	]
	)
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_enable_internal_error_checking])
		
	dnl Now act according to whether the option was requested.
	if test "$fla_enable_internal_error_checking" = "yes" ; then
		
		dnl Tell the user we're checking the value given.
		AC_MSG_CHECKING([user-requested internal error checking level])
		AC_MSG_RESULT([$fla_internal_error_checking_level])

		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_INTERNAL_ERROR_CHECKING,1,
		          [Determines whether to enable internal runtime consistency checks of function parameters and return values.])

		dnl Now we set cpp macros related to each internal error checking level.
		if test "$fla_internal_error_checking_level" = "full" ; then
		
			dnl Encode the C prepropcessor value for full internal error checking.
			fla_level_val=2
			
		elif test "$fla_internal_error_checking_level" = "minimal" ; then

			dnl Encode the C prepropcessor value for minimal internal error checking.
			fla_level_val=1

		fi

	else

		dnl Encode the C prepropcessor value for no internal error checking.
		fla_level_val=0

	fi

	dnl Define the preprocessor macro INTERNAL_ERROR_CHECKING_LEVEL to the value corresponding
	dnl to full, minimal, or no internal error checking, depending on how fla_level_val
	dnl was set above.
	AC_DEFINE_UNQUOTED(FLA_INTERNAL_ERROR_CHECKING_LEVEL,$fla_level_val,
	                   [Encodes the default level of internal error checking chosen at configure-time.])

	dnl Substitute the output variables.
	AC_SUBST(fla_enable_internal_error_checking)
	AC_SUBST(fla_internal_error_checking_level)
])
m4trace:build/ac-macros/fla_check_enable_lapack2flame.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_LAPACK2FLAME], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested the lapack2flame compatibility layer])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([lapack2flame],
	              AC_HELP_STRING([--enable-lapack2flame],[Compile and build into libflame a compatibility layer that maps LAPACK invocations to their corresponding FLAME/C implementations. Note that erroneous input parameters are reported according to libflame conventions, NOT LAPACK conventions. That is, if libflame error checking is disabled, no error checking is performed, and if erroneous input parameters are detected, the library aborts. Also, if this option is enabled, then external-lapack-for-subproblems MUST be disabled. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_lapack2flame=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_lapack2flame=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_LAPACK2FLAME!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_lapack2flame=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_lapack2flame" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_LAPACK2FLAME,1,
		          [Determines whether the LAPACK compatibility layer is included in libflame.])
		
	elif test "$fla_enable_lapack2flame" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_LAPACK2FLAME!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_lapack2flame)

])
m4trace:build/ac-macros/fla_check_enable_ldim_alignment.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_LDIM_ALIGNMENT], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling additional leading dimension alignment])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([ldim-alignment],
	              AC_HELP_STRING([--enable-ldim-alignment],[If memory alignment is requested, enable code that will increase, if necessary, the leading dimension of libflame objects so that each matrix column begins at an aligned address. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_ldim_alignment=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_ldim_alignment=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_LDIM_ALIGNMENT!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_ldim_alignment=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_ldim_alignment" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_LDIM_ALIGNMENT,1,
		          [Determines whether to enable code that will increase FLA_Obj leading dimensions to ensure that matrix columns adhere to the alignment specified by FLA_MEMORY_ALIGNMENT_BOUNDARY.])
		
	elif test "$fla_enable_ldim_alignment" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_LDIM_ALIGNMENT!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_ldim_alignment)

])
m4trace:build/ac-macros/fla_check_enable_max_arg_list_hack.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_MAX_ARG_LIST_HACK], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested hack to circumvent small ARG_MAX])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([max-arg-list-hack],
	              AC_HELP_STRING([--enable-max-arg-list-hack],[Enable makefile code that archives object files from a flat object directory, thus decreasing the potential length of the argument list to ar. Use this option if you get 'Argument list too long' error messages when make tries to archive the library. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_max_arg_list_hack=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_max_arg_list_hack=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_BUILTIN_LAPACK_FUNCTIONS!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_max_arg_list_hack=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_max_arg_list_hack" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_max_arg_list_hack" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_BUILTIN_LAPACK_FUNCTIONS!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_max_arg_list_hack)

])
m4trace:build/ac-macros/fla_check_enable_memory_alignment.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_MEMORY_ALIGNMENT], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested support for memory alignment])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([memory-alignment],
	              AC_HELP_STRING([--enable-memory-alignment=N],[Enable code that aligns dynamically allocated memory regions at N-byte boundaries. Note: N must be a power of two and multiple of sizeof(void*), which is usually 4 on 32-bit architectures and 8 on 64-bit architectures. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "yes" || test "$enableval" = "0" ; then
			
			dnl Disallow disabling.
			AC_MSG_ERROR([[Invalid option to --enable-memory-alignment]])

		elif test "$enableval" = "no" ; then
			
			dnl Disable.
			fla_enable_memory_alignment=no

		else
			
			dnl User provided a valid argument (hopefully). Enable.
			fla_enable_memory_alignment=yes
			fla_memory_alignment_boundary=$enableval
		fi
		
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_memory_alignment=no
	]
	)

	dnl Now act according to whether the option was requested.
	if test "$fla_enable_memory_alignment" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Verify that we have posix_memalign() on hand.
		AC_CHECK_FUNC([posix_memalign])
		
		dnl Define the preprocessor macro to enable the option.
		AC_DEFINE(FLA_ENABLE_MEMORY_ALIGNMENT,1,
		          [Determines whether memory is aligned to user-requested boundaries.])

		dnl Define an additional preprocessor directive that specifies the
		dnl requested value.
		AC_DEFINE_UNQUOTED(FLA_MEMORY_ALIGNMENT_BOUNDARY,$fla_memory_alignment_boundary,
		                   [Sets the byte boundary used to align the starting address of all memory allocated dynamically through libflame.])

		dnl Tell the user we're checking the value given.
		AC_MSG_CHECKING([user-requested memory alignment boundary])
		AC_MSG_RESULT([$fla_memory_alignment_boundary])
		
		dnl Substitute output variable values.
		AC_SUBST(fla_enable_memory_alignment)
		AC_SUBST(fla_memory_alignment_boundary)

	else

		dnl Output the result.
		AC_MSG_RESULT([no])
	fi
])
m4trace:build/ac-macros/fla_check_enable_memory_leak_counter.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_MEMORY_LEAK_COUNTER], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling FLA_malloc()/FLA_free() memory leak counter])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([memory-leak-counter],
	              AC_HELP_STRING([--enable-memory-leak-counter],[Enable code that keeps track of the balance between calls to FLA_malloc() and FLA_free(). If enabled, the counter value is output to standard error upon calling FLA_Finalize(). Note that this option determines the default status, which may be changed at runtime. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_memory_leak_counter=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_memory_leak_counter=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_MEMORY_LEAK_COUNTER!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_memory_leak_counter=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_memory_leak_counter" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_MEMORY_LEAK_COUNTER,1,
		          [Determines whether to enable the FLA_malloc()/FLA_free() memory counter by default.])
		
	elif test "$fla_enable_memory_leak_counter" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_MEMORY_LEAK_COUNTER!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_memory_leak_counter)

])
m4trace:build/ac-macros/fla_check_enable_multithreading.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_MULTITHREADING], [
	dnl Initialize some variables.
	fla_enable_multithreading=no
	fla_multithreading_model=none
	
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested support for multithreading])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([multithreading],
	              AC_HELP_STRING([--enable-multithreading=model],[Enable multithreading support. Valid values for model are "pthreads" and "openmp". Multithreading must be enabled to access SMP parallelized implementations. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "openmp" ; then
			
			dnl Enable with OpenMP support.
			fla_enable_multithreading=yes
			fla_multithreading_model=openmp

		elif test "$enableval" = "pthreads" ; then
			
			dnl Enable with POSIX threads support.
			fla_enable_multithreading=yes
			fla_multithreading_model=pthreads

		elif test "$enableval" = "no" ; then
			
			dnl Disable multithreading.
			fla_enable_multithreading=no
			fla_multithreading_model=none

		else
			
			dnl Invalid option.
			AC_MSG_ERROR([[Invalid option to --enable-multithreading. Valid options are "openmp", "pthreads", and "no".]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_multithreading=no
		fla_multithreading_model=none
	]
	)
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_enable_multithreading])
		
	dnl Now act according to whether the option was requested.
	if test "$fla_enable_multithreading" = "yes" ; then
		
		dnl Tell the user we're checking the value given.
		AC_MSG_CHECKING([user-requested multithreading model])
		AC_MSG_RESULT([$fla_multithreading_model])

		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_MULTITHREADING,1,
		          [Determines whether thread-specific blocks of code should be compiled.])

		dnl Now we set flags and whatnot related to each multithreading model.
		if test "$fla_multithreading_model" = "openmp" ; then
		
			dnl Encode the C prepropcessor value for OpenMP.
			fla_model_val=1
			
			dnl Determine the OpenMP flags to use.
			FLA_SET_C_OPENMP_FLAGS()
		
			dnl Also make sure we can find omp.h. If omp.h is present, do
			dnl nothing. If not, we're in trouble.
			AC_CHECK_HEADER([omp.h],
			[],
			[
				dnl Output an error.
				AC_MSG_ERROR([OpenMP support requires omp.h header file!])
			])

		elif test "$fla_multithreading_model" = "pthreads" ; then

			dnl Encode the C prepropcessor value for POSIX threads.
			fla_model_val=2
			
			dnl Also make sure we can find pthread.h. If pthread.h is present, do
			dnl nothing. If not, we're in trouble.
			AC_CHECK_HEADER([pthread.h],
			[],
			[
				dnl Output an error.
				AC_MSG_ERROR([POSIX threads support requires pthread.h header file!])
			])

		fi

	else

		dnl Encode the C prepropcessor value for no multithreading.
		fla_model_val=0

	fi

	dnl Define the preprocessor macro MULTITHREADING_MODEL to the value corresponding
	dnl to OpenMP or POSIX threads, or no multithreading, depending on how fla_model_val
	dnl was set above.
	AC_DEFINE_UNQUOTED(FLA_MULTITHREADING_MODEL,$fla_model_val,
	                   [Encodes the type of multithreading chosen at configure-time.])

	dnl Substitute the output variables.
	AC_SUBST(fla_enable_multithreading)
	AC_SUBST(fla_multithreading_model)
])
m4trace:build/ac-macros/fla_check_enable_non_critical_code.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_NON_CRITICAL_CODE], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling non-critical code])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([non-critical-code],
	              AC_HELP_STRING([--enable-non-critical-code],[Enable code that provides non-critical functionality. This code has been identified as unnecessary when total library size is of concern. (Enabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_non_critical_code=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_non_critical_code=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_NON_CRITICAL_CODE!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to enable the option.
		fla_enable_non_critical_code=yes
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_non_critical_code" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_NON_CRITICAL_CODE,1,
		          [Determines whether to enable various segments of code identified as providing non-critical functionality.])
		
	elif test "$fla_enable_non_critical_code" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_NON_CRITICAL_CODE!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_non_critical_code)

])
m4trace:build/ac-macros/fla_check_enable_optimizations.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_OPTIMIZATIONS], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether to enable compiler optimizations])

	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([optimizations],
	              AC_HELP_STRING([--enable-optimizations],[Employ traditional compiler optimizations when compiling C and Fortran source code. (Enabled by default.)]),
	[
		
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_compiler_optimizations=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_compiler_optimizations=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_OPTIMIZATIONS!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to enable the option.
		fla_enable_compiler_optimizations=yes
	]
	)

	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_compiler_optimizations" = "yes" ; then

		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_compiler_optimizations" = "no" ; then

		dnl Output the result.
		AC_MSG_RESULT([no])

	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_OPTIMIZATIONS!]])
	fi

	dnl Invoke helper macros.
	FLA_SET_C_OPT_FLAGS($fla_enable_compiler_optimizations)
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_compiler_optimizations)

])
m4trace:build/ac-macros/fla_check_enable_portable_timer.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_PORTABLE_TIMER], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested a portable FLA_Clock() timer])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([portable-timer],
	              AC_HELP_STRING([--enable-portable-timer],[Define the FLA_Clock() timer function using clock_gettime(). If that function is not available, then getttimeofday() is used. If neither function is available, FLA_Clock() is will return a static value. (By default, a portable timer is used (if it exists).)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_portable_timer=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_portable_timer=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_PORTABLE_TIMER!]])
		fi
	],
	[
			dnl User did not specify whether to enable or disable the portable
			dnl implementation of FLA_Clock(). Default behavior is to enable
			dnl the portable timer.
			fla_enable_portable_timer=yes
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_portable_timer" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_PORTABLE_TIMER,1,
		          [Determines whether to define a portable FLA_Clock() in terms of clock_gettime() or gettimeofday() from time.h.])
		
		dnl Look for clock_gettime() and gettimeofday().
		AC_CHECK_FUNC([clock_gettime])
		AC_CHECK_FUNC([gettimeofday])

		fla_portable_timer_function=''

		dnl Define the right cpp macro depending on which function was
		dnl present in the environment.
		if   test "$ac_cv_func_clock_gettime" = "yes" ; then

			fla_portable_timer_function='clock_gettime()'
			AC_DEFINE(FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME,1,
			          [Determines whether clock_gettime() was present on the system (via time.h).])

		elif test "$ac_cv_func_clock_gettime" = "no" ; then

			if   test "$ac_cv_func_gettimeofday" = "yes" ; then

				fla_portable_timer_function='gettimeofday()'
				AC_DEFINE(FLA_PORTABLE_TIMER_IS_GETTIMEOFDAY,1,
				          [Determines whether gettimeofday() was present on the system (via time.h).])

			elif test "$ac_cv_func_gettimeofday" = "no" ; then

				AC_MSG_ERROR([[Neither clock_gettime() nor gettimeofday() were found! FLA_Clock() will be broken!]])

				fla_portable_timer_function='none found!'
				AC_DEFINE(FLA_PORTABLE_TIMER_IS_UNKNOWN,1,
				          [Determines whether a timer was found at all.])
			fi
		fi
		
	elif test "$fla_enable_portable_timer" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
		dnl We'll need strchr(), which is used by detect_clocks() in
		dnl FLA_Clock.c. Verify that we have it.
		AC_CHECK_FUNC([strchr],[],
		[
			AC_MSG_ERROR([Failed to find a working version of strchr()! Try enabling the portable timer, which does not need strchr(), and rerun configure.])
		])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_PORTABLE_TIMER!]])
	fi
	
	dnl Substitute the output variables.
	AC_SUBST(fla_enable_portable_timer)
	AC_SUBST(fla_portable_timer_function)

])
m4trace:build/ac-macros/fla_check_enable_profiling.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_PROFILING], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether to enable compiler profiling symbols])

	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([profiling],
	              AC_HELP_STRING([--enable-profiling],[Use the appropriate profiling flag (usually -pg) when compiling C source code. (Disabled by default.)]),
	[
		
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_compiler_profiling=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_compiler_profiling=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_PROFILING!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_compiler_profiling=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_compiler_profiling" = "yes" ; then

		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_compiler_profiling" = "no" ; then

		dnl Output the result.
		AC_MSG_RESULT([no])

	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_PROFILING!]])
	fi

	dnl Invoke a helper macro.
	FLA_SET_C_PROF_FLAGS($fla_enable_compiler_profiling)

	dnl Substitute the output variable.
	AC_SUBST(fla_enable_compiler_profiling)

])
m4trace:build/ac-macros/fla_check_enable_scc.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_SCC], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested SCC extensions])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([scc],
	              AC_HELP_STRING([--enable-scc],[Enable code that takes advantage of the SCC multicore architecture. When using this option, enabling SuperMatrix is recommended, though not strictly required. Note that this option is experimental. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then

			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_scc=no

		elif test "$enableval" = "yes" ; then

			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_scc=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_SCC!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_scc=no
	]
	)

	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_scc" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_SCC,1,
		          [Determines whether SCC-specific blocks of code should be compiled.])
		
	elif test "$fla_enable_scc" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_SCC!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_scc)

])
m4trace:build/ac-macros/fla_check_enable_static_build.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_STATIC_BUILD], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested building a static library])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([static-build],
	              AC_HELP_STRING([--enable-static-build],[Enable static library generation. (Enabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_static_build=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_static_build=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_STATIC_BUILD!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_static_build=yes
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_static_build" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_static_build" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_STATIC_BUILD!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_static_build)

])
m4trace:build/ac-macros/fla_check_enable_supermatrix.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_SUPERMATRIX], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested SuperMatrix functionality])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([supermatrix],
	              AC_HELP_STRING([--enable-supermatrix],[Enable Ernie Chan's dependency-aware task scheduling and parallel execution system. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then

			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_supermatrix=no

		elif test "$enableval" = "yes" ; then

			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_supermatrix=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_SUPERMATRIX!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_supermatrix=no
	]
	)

	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_supermatrix" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_SUPERMATRIX,1,
		          [Determines whether SuperMatrix-specific blocks of code should be compiled.])
		
	elif test "$fla_enable_supermatrix" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_SUPERMATRIX!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_supermatrix)

])
m4trace:build/ac-macros/fla_check_enable_tidsp.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_TIDSP], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested support for Texas Instruments' DSP])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([tidsp],
	              AC_HELP_STRING([--enable-tidsp],[Enable code required for libflame to run under Texas Instruments' DSP. Note that this option is experimental. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then

			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_tidsp=no

		elif test "$enableval" = "yes" ; then

			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_tidsp=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_TIDSP!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_tidsp=no
	]
	)

	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_tidsp" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_TIDSP,1,
		          [Determines whether blocks of code specific to Texas Instruments' DSP.])
		
	elif test "$fla_enable_tidsp" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_TIDSP!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_tidsp)

])
m4trace:build/ac-macros/fla_check_enable_vector_intrinsics.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_VECTOR_INTRINSICS], [
	dnl Initialize some variables.
	fla_enable_vector_intrinsics=no
	fla_vector_intrinsic_type=none
	
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested use of vector intrinsics])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([vector-intrinsics],
	              AC_HELP_STRING([--enable-vector-intrinsics=type],[Enable highly-optimized code that relies upon vector intrinsics to specify certain operations at a very low level. Valid values for type are "sse" and "none". Specifying "none" is the same as disabling the option. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "sse" ; then
			
			dnl Enable with SSE support.
			fla_enable_vector_intrinsics=yes
			fla_vector_intrinsic_type=sse

		elif test "$enableval" = "no" ; then
			
			dnl Disable SSE support.
			fla_enable_vector_intrinsics=no
			fla_vector_intrinsic_type=none

		elif test "$enableval" = "none" ; then
			
			dnl Disable SSE support.
			fla_enable_vector_intrinsics=no
			fla_vector_intrinsic_type=none

		else
			
			dnl Invalid option.
			AC_MSG_ERROR([[Invalid option to --enable-vector-intrinsics. Valid options are "sse" and "none".]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_vector_intrinsics=no
		fla_vector_intrinsic_type=none
	]
	)
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_enable_vector_intrinsics])
		
	dnl Now act according to whether the option was requested.
	if test "$fla_enable_vector_intrinsics" = "yes" ; then
		
		dnl Tell the user we're checking the value given.
		AC_MSG_CHECKING([user-requested vector intrinsic type])
		AC_MSG_RESULT([$fla_vector_intrinsic_type])

		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_VECTOR_INTRINSICS,1,
		          [Determines whether vector intrinsics are used in certain low-level functions.])

		dnl Now we set flags and whatnot related to each vector intrinsic type.
		if test "$fla_vector_intrinsic_type" = "sse" ; then
		
			dnl Encode the C prepropcessor value for SSE vector intrinsics.
			fla_type_val=3
			
			dnl Determine the OpenMP flags to use.
			FLA_SET_C_SSE_FLAGS()
		
			dnl Also make sure we can find pmmintrin.h. If pmmintrin.h is present, do
			dnl nothing. If not, we're in trouble.
			dnl AC_CHECK_HEADER([pmmintrin.h],
			dnl [],
			dnl [
			dnl 	dnl Output an error.
			dnl 	AC_MSG_ERROR([SSE vector intrinsic support requires pmmintrin.h header file!])
			dnl ])
		fi

	else

		dnl Encode the C prepropcessor value for no vector intrinsics.
		fla_type_val=0

	fi

	dnl Define the preprocessor macro VECTOR_INTRINSICS_TYPE to the value
	dnl corresponding to SSE, or none, depending on how fla_type_val was
	dnl set above.
	AC_DEFINE_UNQUOTED(FLA_VECTOR_INTRINSIC_TYPE,$fla_type_val,
	                   [Encodes the type of vector intrinsics requested at configure-time.])

	dnl Substitute the output variables.
	AC_SUBST(fla_enable_vector_intrinsics)
	AC_SUBST(fla_vector_intrinsic_type)
])
m4trace:build/ac-macros/fla_check_enable_verbose_make_output.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_VERBOSE_MAKE_OUTPUT], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested enabling verbose make output])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([verbose-make-output],
	              AC_HELP_STRING([--enable-verbose-make-output],[Enable verbose output as make compiles source files and archives them into libraries. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_verbose_make_output=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_verbose_make_output=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_VERBOSE_MAKE_OUTPUT!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_verbose_make_output=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_verbose_make_output" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_verbose_make_output" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_VERBOSE_MAKE_OUTPUT!]])

	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_verbose_make_output)

])
m4trace:build/ac-macros/fla_check_enable_warnings.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_WARNINGS], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether to enable compiler warnings])

	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([warnings],
	              AC_HELP_STRING([--enable-warnings],[Use the appropriate flag(s) to request warnings when compiling C and Fortran source code. (Enabled by default.)]),
	[
		
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_compiler_warnings=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_compiler_warnings=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_WARNINGS!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_compiler_warnings=yes
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_compiler_warnings" = "yes" ; then

		dnl Output the result.
		AC_MSG_RESULT([yes])
		
	elif test "$fla_enable_compiler_warnings" = "no" ; then

		dnl Output the result.
		AC_MSG_RESULT([no])

	else

		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_WARNINGS!]])
	fi

	dnl Invoke helper macros.
	FLA_SET_C_WARNING_FLAGS($fla_enable_compiler_warnings)
		
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_compiler_warnings)

])
m4trace:build/ac-macros/fla_check_enable_windows_build.m4:32: -1- AC_DEFUN([FLA_CHECK_ENABLE_WINDOWS_BUILD], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested modifying libflame compilating/linking on Windows])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_ENABLE([windows-build],
	              AC_HELP_STRING([--enable-windows-build],[Enable code that is needed for a Windows-friendly build of libflame. (Disabled by default.)]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$enableval" = "no" ; then
			
			dnl User provided --enable-<option>=no or --disable-<option>.
			fla_enable_windows_build=no

		elif test "$enableval" = "yes" ; then
			
			dnl User provided --enable-<option>=yes or --enable-<option>.
			fla_enable_windows_build=yes
		else

			dnl We don't need an else branch because the configure script
			dnl should detect whether the user provided an unexpected argument
			dnl with the option.
			AC_MSG_ERROR([[Reached unreachable branch in FLA_CHECK_ENABLE_WINDOWS_BUILD!]])
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_enable_windows_build=no
	]
	)
	
	dnl Now act according to whether the option was requested.
	if   test "$fla_enable_windows_build" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes])
		
		dnl Define the macro.
		AC_DEFINE(FLA_ENABLE_WINDOWS_BUILD,1,
		          [Determines whether to modify various segments of code needed for integrating libflame into Windows.])
	
	elif test "$fla_enable_windows_build" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else
		dnl Only "yes" and "no" are accepted, so this block is empty.
		AC_MSG_ERROR([[Reached unreachable branch in CHECK_ENABLE_WINDOWS_BUILD!]])
	fi
	
	dnl Substitute the output variable.
	AC_SUBST(fla_enable_windows_build)

])
m4trace:build/ac-macros/fla_check_with_ar.m4:32: -1- AC_DEFUN([FLA_CHECK_WITH_AR], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested a specific library archiver])
	
	dnl Determine whether the user gave the --enable-<option> or
    dnl --disable-<option>. If so, then run the first snippet of code;
    dnl otherwise, run the second code block.
	AC_ARG_WITH([ar],
	            AC_HELP_STRING([--with-ar=ar],[ Search for and use a library archiver named <ar>. If <ar> is not found, then use the first library archiver found from the default search list for the detected build architecture. Note: the library archiver search list usually consists only of "ar".]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$withval" = "no" ; then
			
			dnl User provided --with-<option>=no or --without-<option>.
			fla_with_specific_ar=without
			fla_requested_ar=''

		elif test "$withval" = "yes" ; then
			
			dnl User provided --with-<option>=yes or --with-<option>.
			fla_with_specific_ar=no
			fla_requested_ar=''
		else
			
			dnl User provided argument value: --with-<option>=value.
			fla_with_specific_ar=yes
			fla_requested_ar=$withval
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
        dnl Default behavior is to disable the option.
		fla_with_specific_ar=no
		fla_requested_ar=''
	]
	)
	
	dnl Now act according to whether a specific value was given.
	if test "$fla_with_specific_ar" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes ($fla_requested_ar)])
		
	elif test "$fla_with_specific_ar" = "without" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
		dnl The user requested --with-ar=no or --without-ar. Scold him.
		AC_MSG_ERROR([[Detected --without-ar. Cannot continue with library archiver disabled!]])
		
	else
		dnl Output the result.
		AC_MSG_RESULT([no])
	fi
	
	dnl Check for AR environment variable, which would override everything else.
	if test "$AR" != "" ; then
		AC_MSG_NOTICE([[AR environment variable is set to $AR, which will override --with-ar option and default search list for library archiver.]])
	fi

])
m4trace:build/ac-macros/fla_check_with_cc.m4:32: -1- AC_DEFUN([FLA_CHECK_WITH_CC], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested a specific C compiler])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_WITH([cc],
	            AC_HELP_STRING([--with-cc=cc],[Search for and use a C compiler named <cc>. If <cc> is not found, then use the first compiler found from the default search list for the detected build architecture.]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$withval" = "no" ; then
			
			dnl User provided --with-<option>=no or --without-<option>.
			fla_with_specific_cc=without
			fla_requested_cc=''

		elif test "$withval" = "yes" ; then
			
			dnl User provided --with-<option>=yes or --with-<option>.
			fla_with_specific_cc=no
			fla_requested_cc=''
		else
			
			dnl User provided argument value: --with-<option>=value.
			fla_with_specific_cc=yes
			fla_requested_cc=$withval
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_with_specific_cc=no
		fla_requested_cc=''
	]
	)
	
	dnl Now act according to whether a specific value was given.
	if test "$fla_with_specific_cc" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes ($fla_requested_cc)])
		
	elif test "$fla_with_specific_cc" = "without" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
		dnl The user requested --with-cc=no or --without-cc. Scold him.
		AC_MSG_ERROR([[Detected --without-cc. Cannot continue with C compiler disabled!]])
		
	else
		dnl Output the result.
		AC_MSG_RESULT([no])
	fi
	
	dnl Check for CC environment variable, which would override everything else.
	if test "$CC" != "" ; then
		AC_MSG_NOTICE([[CC environment variable is set to $CC, which will override --with-cc option and default search list for C compiler.]])
	fi

])
m4trace:build/ac-macros/fla_check_with_extra_cflags.m4:32: -1- AC_DEFUN([FLA_CHECK_WITH_EXTRA_CFLAGS], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested using extra C compiler flags])
	
	dnl Determine whether the user gave the --enable-<option> or
	dnl --disable-<option>. If so, then run the first snippet of code;
	dnl otherwise, run the second code block.
	AC_ARG_WITH([extra-cflags],
	            AC_HELP_STRING([--with-extra-cflags=flagstring],[When compiling C code, use the flags in flagstring in addition to the flags that configure would normally use. This is useful when the user wants some extra flags passed to the compiler but does not want to manually set the CFLAGS environment variable and thus override all of the default compiler flags.]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$withval" = "no" ; then
			
			dnl User provided --with-<option>=no or --without-<option>.
			fla_with_extra_cflags=no
			fla_extra_cflags=''

		else
			
			dnl User provided argument value: --with-<option>=value.
			fla_with_extra_cflags=yes
			fla_extra_cflags=$withval
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
		dnl Default behavior is to disable the option.
		fla_with_extra_cflags=no
		fla_extra_cflags=''
	]
	)
	
	dnl Now act according to whether a specific value was given.
	if test "$fla_with_extra_cflags" = "no" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
	else

		dnl Output the result.
		AC_MSG_RESULT([yes ($fla_extra_cflags)])
		
	fi
	
	dnl Check for CC environment variable, which would override everything else.
	if test "$EXTRA_CFLAGS" != "" ; then
		AC_MSG_NOTICE([[EXTRA_CFLAGS environment variable is set to $EXTRA_CFLAGS, which will override --with-extra-cflags option.]])
        fla_with_extra_cflags=yes
        fla_extra_cflags="$EXTRA_CFLAGS"
	fi

	dnl Declare EXTRA_CFLAGS as precious
	AC_ARG_VAR([EXTRA_CFLAGS],[extra C compiler flags to be used in addition to those determined automatically by configure])
	
	dnl Substitute the output variable.
	AC_SUBST(fla_with_extra_cflags)
	AC_SUBST(fla_extra_cflags)
])
m4trace:build/ac-macros/fla_check_with_ranlib.m4:32: -1- AC_DEFUN([FLA_CHECK_WITH_RANLIB], [
	dnl Tell the user we're checking whether to enable the option.
	AC_MSG_CHECKING([whether user requested a specific library archive indexer])
	
	dnl Determine whether the user gave the --enable-<option> or
    dnl --disable-<option>. If so, then run the first snippet of code;
    dnl otherwise, run the second code block.
	AC_ARG_WITH([ranlib],
	            AC_HELP_STRING([--with-ranlib=ranlib],[ Search for and use a library archive indexer named <ranlib>. If <ranlib> is not found, then use the first library archive indexer found from the default search list for the detected build architecture. Note: the library archive indexer search list usually consists only of "ranlib".]),
	[
		dnl If any form of the option is given, handle each case.
		if test "$withval" = "no" ; then
			
			dnl User provided --with-<option>=no or --without-<option>.
			fla_with_specific_ranlib=without
			fla_requested_ranlib=''

		elif test "$withval" = "yes" ; then
			
			dnl User provided --with-<option>=yes or --with-<option>.
			fla_with_specific_ranlib=no
			fla_requested_ranlib=''
		else
			
			dnl User provided argument value: --with-<option>=value.
			fla_with_specific_ranlib=yes
			fla_requested_ranlib=$withval
		fi
	],
	[
		dnl User did not specify whether to enable or disable the option.
        dnl Default behavior is to disable the option.
		fla_with_specific_ranlib=no
		fla_requested_ranlib=''
	]
	)
	
	dnl Now act according to whether a specific value was given.
	if test "$fla_with_specific_ranlib" = "yes" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([yes ($fla_requested_ranlib)])
		
	elif test "$fla_with_specific_ranlib" = "without" ; then
		
		dnl Output the result.
		AC_MSG_RESULT([no])
		
		dnl The user requested --with-ranlib=no or --without-ranlib. Scold him.
		AC_MSG_ERROR([[Detected --without-ranlib. Cannot continue with library archive indexer disabled!]])
		
	else
		dnl Output the result.
		AC_MSG_RESULT([no])
	fi
	
	dnl Check for RANLIB environment variable, which would override everything else.
	if test "$RANLIB" != "" ; then
		AC_MSG_NOTICE([[RANLIB environment variable is set to $RANLIB, which will override --with-ranlib option and default search list for library archive indexer.]])
	fi

])
m4trace:build/ac-macros/fla_observe_host_cpu_type.m4:32: -1- AC_DEFUN([FLA_OBSERVE_HOST_CPU_TYPE], [
	AC_REQUIRE([AC_CANONICAL_HOST])
	
	case $host in
		dnl Intel Pentium-based class of processors, as well as those processors
		dnl such as AMD Athlons, Durons, etc that fall under the i?86 family.
		i386*-*-* | i586*-*-* | i686*-*-*)
			fla_host_cpu=$host_cpu
			fla_c_compiler_list="gcc icc cc"
			fla_mpicc_compiler_list="mpicc"
			fla_ar=ar
			fla_ranlib=ranlib
		;;
		dnl Intel EM64T or AMD Opteron/Athlon64 processors.
		x86_64*-*-*)
			fla_host_cpu=$host_cpu
			fla_c_compiler_list="gcc icc pathcc cc"
			fla_mpicc_compiler_list="mpicc"
			fla_ar=ar
			fla_ranlib=ranlib
		;;
		dnl Intel Itanium processors.
		ia64*-*-*)
			fla_host_cpu=$host_cpu
			fla_c_compiler_list="icc gcc cc"
			fla_mpicc_compiler_list="mpicc"
			fla_ar=ar
			fla_ranlib=ranlib
		;;
		dnl NEC SX systems.
		sx*-nec-superux*)
			fla_host_cpu=$host_cpu
			fla_c_compiler_list="sxcc"
			fla_mpicc_compiler_list="mpicc"
			fla_ar=sxar
			fla_ranlib=ranlib
		;;
		dnl IBM POWER/AIX systems.
		powerpc*-ibm-aix*)
			fla_host_cpu=$host_cpu
			fla_c_compiler_list="xlc"
			fla_mpicc_compiler_list="mpcc mpicc"
			fla_ar=ar
			fla_ranlib=ranlib
		;;
		dnl PowerPC/Cell systems.
		powerpc64-*-linux-gnu)
			if test "$fla_enable_cell_spu_parallelism" = "yes" ; then
				fla_host_cpu=$host_cpu
				fla_c_compiler_list="ppu-gcc"
				fla_mpicc_compiler_list="mpicc"
				fla_ar=ppu-ar
				fla_ranlib=ppu-ranlib
			else
				fla_host_cpu=$host_cpu
				fla_c_compiler_list="gcc xlc"
				fla_mpicc_compiler_list="mpicc"
				fla_ar=ar
				fla_ranlib=ranlib
			fi
		;;
		dnl For all other proessors, use a basic search path.
		*)
			fla_host_cpu=$host_cpu
			fla_c_compiler_list="gcc cc" 
			fla_mpicc_compiler_list="mpicc"
			fla_ar=ar
			fla_ranlib=ranlib
		;;
	esac
	
	dnl Substitute the cpu type into the autoconf output files
	AC_SUBST(fla_host_cpu)

])
m4trace:build/ac-macros/fla_require_ar.m4:32: -1- AC_DEFUN([FLA_REQUIRE_AR], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	dnl Declare AR as precious
	AC_ARG_VAR([AR],[library archiver])
	
	dnl If AR was not preset externally, then check for an archiver ourselves.
	if test "$AR" = "" ; then

		dnl If \$fla_requested_ar is set, then check for it first. This variable
		dnl was set in fla_check_with_ar. It is usually empty, but could be
		dnl non-empty if the user provided the --with-ar option to configure.
		if test "$fla_requested_ar" != "" ; then
			
			AC_CHECK_PROG([AR],$fla_requested_ar,$fla_requested_ar,[no])
		
			if test "$AR" = "no" ; then
				AC_MSG_WARN([Could not locate requested archiver ($fla_requested_ar)! Continuing search for default archiver ($fla_ar)],[1])
			fi
		fi
	
		dnl If the previous check for the requested archiver was unsuccessful in
		dnl setting AR, or if a specific archiver was not requested through
		dnl --with-ar to begin with, then check for the default archiver \$fla_ar.
		dnl This variable was set in fla_observe_cpu_type. Most of the time it is
		dnl simply set to "ar" but sometimes--for example, when cross-compiling
		dnl for the NEC SX-6--the default archiver is not named "ar".
		if test "$AR" = "no" || test "$AR" = "" ; then
			
			AC_CHECK_PROG([AR],$fla_ar,$fla_ar,[no])

			if test "$AR" = "no" ; then
				AC_MSG_ERROR([Could not locate $fla_ar! Cannot continue without a library archiver.],[1])
			fi
		fi
	
		dnl Determine the result of the macros and report an error if necessary. The
		dnl previous call to AC_CHECK_PROG also set AR to the value of \$fla_ar if 
		dnl the program by that name was found. If it was not found, then we can't
		dnl continue.
	fi
])
m4trace:build/ac-macros/fla_require_cc.m4:32: -1- AC_DEFUN([FLA_REQUIRE_CC], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])

	dnl Save the value of CFLAGS. This will come in useful later in determining
	dnl whether the user provided his own definition of CFLAGS.
	fla_userdef_cflags=$CFLAGS
	
	dnl Find a C compiler. 
	dnl If the CC environment variable is not already set, search for the
	dnl compiler defined by fla_requested_cc (which may be empty) and then
	dnl continue searching for the compilers in $fla_c_compiler_list, if
	dnl necessary. Also, if the C compiler found is not in ANSI mode, then
	dnl try to add an option to make it so. If the GNU gcc was found, then
	dnl GCC shell variable is set to `yes'. 
	AC_PROG_CC([$fla_requested_cc $fla_c_compiler_list])

	if test "$CC" = "" ; then
		AC_MSG_ERROR([Could not locate any of the following C compilers: $CC $fla_requested_cc $fla_c_compiler_list. Cannot continue without a C compiler.],[1])
	fi
	
	dnl Substitute the user-defined CFLAGS into the autoconf output files.
	AC_SUBST(fla_userdef_cflags)
])
m4trace:build/ac-macros/fla_require_find.m4:32: -1- AC_DEFUN([FLA_REQUIRE_FIND], [
	dnl Declare FIND as precious
	AC_ARG_VAR([FIND],[find utility])
	
	dnl Check that find is present.
	AC_CHECK_PROG([FIND],[find],[find],[not found!])
	
	dnl Determine the result of the macro and report an error if necessary.
	if test "$FIND" != "find" ; then
		AC_MSG_WARN([[Could not locate find! Note: make-cleaning makefile fragments requires find.]],[1])
	fi
])
m4trace:build/ac-macros/fla_require_gnu_bash.m4:32: -1- AC_DEFUN([FLA_REQUIRE_GNU_BASH], [
	dnl Output a message saying we're going to check for GNU bash.
	AC_MSG_CHECKING([[for GNU bash]])

	dnl Check the cache for the result. If it's not result is not yet cached,
	dnl execute the shell code to set the cache-id (ie: look for bash).
	AC_CACHE_VAL([_cv_gnu_bash_command],
	[
		dnl Initialize the cache-id to null.
		_cv_gnu_bash_command='';
	
		dnl Check that some version of bash is present.
		dnl If bash is not present, then output an error message.
		if ( sh -c "bash --version" 2> /dev/null | grep GNU 2>&1 > /dev/null ); then
			_cv_gnu_bash_command='bash';
		fi
	])
	
	dnl Now that we've checked for GNU bash, let's determine the result of the
	dnl macro and report and error if bash was not found.
	if test "$_cv_gnu_bash_command" = "bash" ; then
		AC_MSG_RESULT([[bash]])
	else
		AC_MSG_RESULT([[not found!]])
		AC_MSG_ERROR([[Could not locate GNU bash! Bailing out...]],[1])
	fi
])
m4trace:build/ac-macros/fla_require_gnu_make.m4:32: -1- AC_DEFUN([FLA_REQUIRE_GNU_MAKE], [
	AC_CACHE_CHECK( for GNU make,_cv_gnu_make_command,
		_cv_gnu_make_command='';
		dnl Search all the common names for GNU make
		for a in "$MAKE" make gmake gnumake ; do
			if test -z "$a" ; then continue ; fi ;
			if ( sh -c "$a --version" 2> /dev/null | grep GNU  2>&1 > /dev/null ) ;  then
				_cv_gnu_make_command=$a;
				break;
			fi
		done;
	);
	dnl If there was a GNU version, then set @fla_gnu_make_found@ to "true"
	if test  "x$_cv_gnu_make_command" != "x"  ; then
		fla_gnu_make_found=yes
	else
		fla_gnu_make_found=no
		AC_MSG_RESULT("not found!");
		AC_MSG_ERROR([[Could not locate GNU make! Bailing out...]],[1])
	fi
	AC_SUBST(fla_gnu_make_found)
])
m4trace:build/ac-macros/fla_require_no_lapack_namespace_conflict.m4:32: -1- AC_DEFUN([FLA_REQUIRE_NO_LAPACK_NAMESPACE_CONFLICT], [
	AC_REQUIRE([FLA_CHECK_ENABLE_LAPACK2FLAME])
	AC_REQUIRE([FLA_CHECK_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS])
	AC_REQUIRE([FLA_CHECK_ENABLE_EXTERNAL_LAPACK_INTERFACES])

	dnl Make sure the user did not request an invalid/dangerous combination of
	dnl LAPACK compatibility/interfacing options.

	dnl Scenarios 1 and 2
	if test "$fla_enable_lapack2flame" = "yes" ; then
		if test "$fla_enable_external_lapack_for_subproblems" = "yes" ; then
			AC_MSG_ERROR([Configuring libflame to enable both lapack2flame and external-lapack-for-subproblems is not allowed. lapack2flame requires that external-lapack-for-subproblems be disabled. Please adjust your configure options accordingly and then re-run configure.],[1])
		fi
	fi

	dnl Scenario 3
	if test "$fla_enable_lapack2flame" = "no" ; then
		if test "$fla_enable_external_lapack_for_subproblems" = "yes" ; then
			if test "$fla_enable_external_lapack_interfaces" = "no" ; then
				AC_MSG_ERROR([Configuring libflame to enable external-lapack-for-subproblems without external-lapack-interfaces is not allowed. external-lapack-for-subproblems requires that external-lapack-interfaces be enabled. Please adjust your configure options accordingly and then re-run configure.],[1])
			fi
		fi
	fi
])
m4trace:build/ac-macros/fla_require_ranlib.m4:32: -1- AC_DEFUN([FLA_REQUIRE_RANLIB], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	dnl Declare RANLIB as precious
	AC_ARG_VAR([RANLIB],[library archive indexer])
	
	dnl If RANLIB was not preset externally, then check for an indexer ourselves.
	if test "$RANLIB" = "" ; then

		dnl If $fla_requested_ranlib is set, then check for it first. This variable
		dnl was set in fla_check_with_ranlib. It is usually empty, but could be
		dnl non-empty if the user provided the --with-ranlib option to configure.
		if test "$fla_requested_ranlib" != "" ; then
			
			AC_CHECK_PROG([AR],$fla_requested_ranlib,$fla_requested_ranlib,[no])
		
			if test "$RANLIB" = "no" ; then
				AC_MSG_WARN([Could not locate requested archive indexer ($fla_requested_ranlib)! Continuing search for default archive indexer ($fla_ranlib)],[1])
			fi
		fi
	
		dnl If the previous check for the requested indexer was unsuccessful in
		dnl setting RANLIB, or if a specific indexer was not requested through
		dnl --with-ranlib to begin with, then check for the default indexer
		dnl $fla_ranlib. This variable was set in fla_observe_cpu_type. Most of
		dnl the time it is simply set to "ranlib" but sometimes the default
		dnl indexer is not named "ranlib".
		if test "$RANLIB" = "no" || test "$RANLIB" = "" ; then
			
			AC_CHECK_PROG([RANLIB],$fla_ranlib,$fla_ranlib,[no])

			if test "$RANLIB" = "no" ; then
				AC_MSG_ERROR([Could not locate $fla_ranlib! Cannot continue without a library archive indexer.],[1])
			fi
		fi
	
		dnl Determine the result of the macros and report an error if necessary. The
		dnl previous call to AC_CHECK_PROG also set RANLIB to the value of \$fla_ranlib 
		dnl if the program by that name was found. If it was not found, then we can't
		dnl continue.
	fi
])
m4trace:build/ac-macros/fla_require_static_or_dynamic_build.m4:32: -1- AC_DEFUN([FLA_REQUIRE_STATIC_OR_DYNAMIC_BUILD], [
	AC_REQUIRE([FLA_CHECK_ENABLE_STATIC_BUILD])
	AC_REQUIRE([FLA_CHECK_ENABLE_DYNAMIC_BUILD])

	dnl Make sure the user requested the static or the dynamic build (or both).

	dnl Scenario 3
	if test "$fla_enable_static_build" = "no" ; then
		if test "$fla_enable_dynamic_build" = "no" ; then
			AC_MSG_ERROR([Configuring libflame to disable both static and dynamic builds is not allowed. Please enable a static build or a dynamic build (or both) and then re-run configure.],[1])
		fi
	fi
])
m4trace:build/ac-macros/fla_require_supermatrix_enabled.m4:32: -1- AC_DEFUN([FLA_REQUIRE_SUPERMATRIX_ENABLED], [
	AC_REQUIRE([FLA_CHECK_ENABLE_SUPERMATRIX])
	AC_REQUIRE([FLA_CHECK_ENABLE_MULTITHREADING])
	AC_REQUIRE([FLA_CHECK_ENABLE_GPU])

	dnl Make sure the user did not request an invalid combination of
	dnl parallelization options.

	dnl Scenario 1: User wants GPU support but forgot to enable SM.
	if test "$fla_enable_gpu" = "yes" ; then
		if test "$fla_enable_supermatrix" = "no" ; then
			AC_MSG_ERROR([Configuring libflame to enable GPU support without also enabling SuperMatrix is not allowed. GPU utilization requires that SuperMatrix be enabled. Please adjust your configure options accordingly and then re-run configure.],[1])
		fi
	fi
])
m4trace:build/ac-macros/fla_require_xargs.m4:32: -1- AC_DEFUN([FLA_REQUIRE_XARGS], [
	dnl Declare XARGS as precious
	AC_ARG_VAR([XARGS],[xargs utility])
	
	dnl Check that xargs is present.
	AC_CHECK_PROG([XARGS],[xargs],[xargs],[not found!])
	
	dnl Determine the result of the macro and report an error if necessary.
	if test "$XARGS" != "xargs" ; then
		AC_MSG_WARN([[Could not locate xargs! Note: make-cleaning makefile fragments requires xargs.]],[1])
	fi
])
m4trace:build/ac-macros/fla_set_c_debug_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_DEBUG_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	AC_MSG_CHECKING([for (guessing) appropriate $CC debug flags])

	if test "$1" == "yes" ; then
		
		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_debug_flags='-g'
			;;
			dnl Intel cc.
			icc)
				fla_c_debug_flags='-g'
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_debug_flags='-g'
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_debug_flags='-g'
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_debug_flags='-g -C debug'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_debug_flags='-g'
			;;
			dnl ambiguous cc.
			cc)
				fla_c_debug_flags='-g'
			;;
			dnl for all other C compilers.
			*)
				fla_c_debug_flags=''
			;;
		esac
	else

		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_debug_flags='-g0'
			;;
			dnl Intel cc.
			icc)
				fla_c_debug_flags=''
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_debug_flags=''
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_debug_flags=''
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_debug_flags='-Ng'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_debug_flags=''
			;;
			dnl ambiguous cc.
			cc)
				fla_c_debug_flags=''
			;;
			dnl for all other C compilers.
			*)
				fla_c_debug_flags=''
			;;
		esac
	fi
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_c_debug_flags])
	
	dnl Substitute the debug flags into the autoconf output files
	AC_SUBST(fla_c_debug_flags)

])
m4trace:build/ac-macros/fla_set_c_lang_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_LANG_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	AC_MSG_CHECKING([for (guessing) appropriate $CC language flags])

	dnl Set C compiler flags assuming we found...
	case $CC in
		dnl GNU gcc.
		gcc)
			fla_c_lang_flags='-std=c99'
		;;
		dnl Intel cc.
		icc)
			fla_c_lang_flags='-std=c99'
		;;
		dnl PathScale pathcc.
		pathcc)
			fla_c_lang_flags='-std=c99'
		;;
		dnl PGI pgcc.
		pgcc)
			fla_c_lang_flags='-c99'
		;;
		dnl NEC sxcc.
		sxcc)
			fla_c_lang_flags=''
		;;
		dnl IBM xlc.
		xlc)
			fla_c_lang_flags='-std=c99'
		;;
		dnl ambiguous cc.
		cc)
			fla_c_lang_flags='-std=c99'
		;;
		dnl for all other C compilers.
		*)
			fla_c_lang_flags=''
		;;
	esac

	dnl Output the result.
	AC_MSG_RESULT([$fla_c_lang_flags])
	
	dnl Substitute the language flags into the autoconf output files
	AC_SUBST(fla_c_lang_flags)

])
m4trace:build/ac-macros/fla_set_c_openmp_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_OPENMP_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
		
	dnl Echo C OpenMP flags to user.
	AC_MSG_CHECKING([for (guessing) OpenMP flags for $CC])
		
	dnl Set the OpenMP compiler flags based on which C compiler we're going to use.
	case $CC in
		dnl Intel icc.
		icc)
			fla_c_openmp_flags='-openmp'
		;;
		dnl GNU gcc.
		gcc)
			fla_c_openmp_flags='-fopenmp'
		;;
		dnl PathScale pathcc
		pathcc)
			fla_c_openmp_flags='-mp'
		;;
		dnl PGI pgcc.
		pgcc)
			fla_c_openmp_flags='-mp'
		;;
		dnl NEC sxcc.
		sxcc)
			fla_c_openmp_flags='-P openmp'
		;;
		dnl IBM xlc
		xlc)
			fla_c_openmp_flags='-qsmp=omp'
		;;
		dnl for all other C compilers.
		*)
			fla_c_openmp_flags='unknown'
		;;
	esac
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_c_openmp_flags])
	
	dnl Check string in case C OpenMP compiler is unknown.
	if test "$fla_c_openmp_flags" = "unknown" ; then
		
		dnl Tell the user we can't continue unless we know what flags
		dnl to pass to the C compiler to enable OpenMP.
		AC_MSG_ERROR([configure doesn't know what flag to give $CC in order to enable OpenMP support. Please submit a bug report to the FLAME developers at FLA_BUG_REPORT_ADDRESS.])
	fi

	dnl Output the C OpenMP flags variable.
	AC_SUBST(fla_c_openmp_flags)
])
m4trace:build/ac-macros/fla_set_c_opt_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_OPT_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	AC_MSG_CHECKING([for (guessing) appropriate $CC optimization flags])

	if test "$1" == "yes" ; then

		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_opt_flags='-O3'
			;;
			dnl Intel cc.
			icc)
				fla_c_opt_flags='-O3'
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_opt_flags='-O3'
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_opt_flags='-O3'
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_opt_flags='-C vopt -O nooverlap -pvctl,noassume,vwork=stack'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_opt_flags='-O5'
			;;
			dnl ambiguous cc.
			cc)
				fla_c_opt_flags='-O'
			;;
			dnl for all other C compilers.
			*)
				fla_c_opt_flags=''
			;;
		esac
	else
		
		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_opt_flags='-O0'
			;;
			dnl Intel cc.
			icc)
				fla_c_opt_flags='-O0'
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_opt_flags='-O0'
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_opt_flags='-O0'
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_opt_flags='-C noopt'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_opt_flags=''
			;;
			dnl ambiguous cc.
			cc)
				fla_c_opt_flags=''
			;;
			dnl for all other C compilers.
			*)
				fla_c_opt_flags=''
			;;
		esac
	fi

	dnl Output the result.
	AC_MSG_RESULT([$fla_c_opt_flags])
	
	dnl Substitute the optimization flags into the autoconf output files
	AC_SUBST(fla_c_opt_flags)

])
m4trace:build/ac-macros/fla_set_c_preproc_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_PREPROC_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	dnl Set C preprocessor flags assuming we found...
	case $CC in
		dnl GNU gcc.
		gcc)
			dnl Define the _GNU_SOURCE macro.
			AC_DEFINE(_GNU_SOURCE,1,
			          [Enables ANSI C, POSIX.1, POSIX.2, BSD, SVID, X/Open, and GNU extensions to the C language.])
		;;
		dnl Intel cc.
		icc)
		;;
		dnl PathScale pathcc.
		pathcc)
		;;
		dnl PGI pgcc.
		pgcc)
		;;
		dnl NEC sxcc.
		sxcc)
		;;
		dnl IBM xlc.
		xlc)
		;;
		dnl ambiguous cc.
		cc)
		;;
		dnl for all other C compilers.
		*)
		;;
	esac
])
m4trace:build/ac-macros/fla_set_c_prof_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_PROF_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	AC_MSG_CHECKING([for (guessing) appropriate $CC profiling flags])

	if test "$1" == "yes" ; then
		
		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_prof_flags='-pg'
			;;
			dnl Intel cc.
			icc)
				fla_c_prof_flags='-p'
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_prof_flags='-pg'
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_prof_flags='-pg'
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_prof_flags='-p'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_prof_flags='-pg'
			;;
			dnl ambiguous cc.
			cc)
				fla_c_prof_flags='-pg'
			;;
			dnl for all other C compilers.
			*)
				fla_c_prof_flags=''
			;;
		esac
	else

		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_prof_flags=''
			;;
			dnl Intel cc.
			icc)
				fla_c_prof_flags=''
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_prof_flags=''
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_prof_flags=''
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_prof_flags='-Np'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_prof_flags=''
			;;
			dnl ambiguous cc.
			cc)
				fla_c_prof_flags=''
			;;
			dnl for all other C compilers.
			*)
				fla_c_prof_flags=''
			;;
		esac
	fi
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_c_prof_flags])
	
	dnl Substitute the prof flags into the autoconf output files
	AC_SUBST(fla_c_prof_flags)

])
m4trace:build/ac-macros/fla_set_c_sse_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_SSE_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
		
	dnl Echo C SSE flags to user.
	AC_MSG_CHECKING([for (guessing) SSE flags for $CC])
		
	dnl Set the SSE compiler flags based on which C compiler we're going to use.
	case $CC in
		dnl Intel icc.
		icc)
			fla_c_sse_flags='-msse3'
		;;
		dnl GNU gcc.
		gcc)
			fla_c_sse_flags='-msse3'
		;;
		dnl PathScale pathcc
		pathcc)
			fla_c_sse_flags='unknown'
		;;
		dnl PGI pgcc
		pgcc)
			fla_c_sse_flags='-Mvect=sse'
		;;
		dnl NEC sxcc.
		sxcc)
			fla_c_sse_flags='notvalid'
		;;
		dnl IBM xlc
		xlc)
			fla_c_sse_flags='notvalid'
		;;
		dnl for all other C compilers.
		*)
			fla_c_sse_flags='unknown'
		;;
	esac
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_c_sse_flags])
	
	dnl Check string in case C SSE flags are not valid.
	if test "$fla_c_sse_flags" = "notvalid" ; then
		
		dnl Tell the user we can't continue because he asked for SSE flags
		dnl for a compiler that (probably) does not support them.
		AC_MSG_ERROR([configure can't continue because the $CC compiler (probably) does not support SSE.])
	fi

	dnl Check string in case C SSE flags are unknown.
	if test "$fla_c_sse_flags" = "unknown" ; then
		
		dnl Tell the user we can't continue unless we know what flags
		dnl to pass to the C compiler to enable SSE support.
		AC_MSG_ERROR([configure doesn't know what flag to give $CC in order to enable SSE. Please submit a bug report to the FLAME developers at FLA_BUG_REPORT_ADDRESS.])
	fi

	dnl Output the C SSE flags variable.
	AC_SUBST(fla_c_sse_flags)
])
m4trace:build/ac-macros/fla_set_c_warning_flags.m4:32: -1- AC_DEFUN([FLA_SET_C_WARNING_FLAGS], [
	AC_REQUIRE([FLA_OBSERVE_HOST_CPU_TYPE])
	
	AC_MSG_CHECKING([for (guessing) appropriate $CC warning flags])

	if test "$1" == "yes" ; then
		
		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_warning_flags='-Wall -Wno-comment'
			;;
			dnl Intel cc.
			icc)
				fla_c_warning_flags='-Wall -wd869,981,1418,1419,1572'
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_warning_flags='-Wall'
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_warning_flags='-Minform=warn'
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_warning_flags='-w all'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_warning_flags='-qcpluscmt'
			;;
			dnl ambiguous cc.
			cc)
				fla_c_warning_flags=''
			;;
			dnl for all other C compilers.
			*)
				fla_c_warning_flags=''
			;;
		esac
	else

		dnl Set C compiler flags assuming we found...
		case $CC in
			dnl GNU gcc.
			gcc)
				fla_c_warning_flags='-w'
			;;
			dnl Intel cc.
			icc)
				fla_c_warning_flags='-w'
			;;
			dnl PathScale pathcc.
			pathcc)
				fla_c_warning_flags='-w'
			;;
			dnl PGI pgcc.
			pgcc)
				fla_c_warning_flags='-w'
			;;
			dnl NEC sxcc.
			sxcc)
				fla_c_warning_flags='-w none'
			;;
			dnl IBM xlc.
			xlc)
				fla_c_warning_flags='-w -qcpluscmt'
			;;
			dnl ambiguous cc.
			cc)
				fla_c_warning_flags=''
			;;
			dnl for all other C compilers.
			*)
				fla_c_warning_flags=''
			;;
		esac
	fi
	
	dnl Output the result.
	AC_MSG_RESULT([$fla_c_warning_flags])
	
	dnl Substitute the warning flags into the autoconf output files
	AC_SUBST(fla_c_warning_flags)

])
m4trace:configure.ac:59: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:59: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:59: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:59: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:59: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:59: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:59: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:59: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:59: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:151: -1- m4_pattern_allow([^build$])
m4trace:configure.ac:151: -1- m4_pattern_allow([^build_cpu$])
m4trace:configure.ac:151: -1- m4_pattern_allow([^build_vendor$])
m4trace:configure.ac:151: -1- m4_pattern_allow([^build_os$])
m4trace:configure.ac:152: -1- m4_pattern_allow([^host$])
m4trace:configure.ac:152: -1- m4_pattern_allow([^host_cpu$])
m4trace:configure.ac:152: -1- m4_pattern_allow([^host_vendor$])
m4trace:configure.ac:152: -1- m4_pattern_allow([^host_os$])
m4trace:configure.ac:158: -1- FLA_OBSERVE_HOST_CPU_TYPE
m4trace:configure.ac:158: -1- m4_pattern_allow([^fla_host_cpu$])
m4trace:configure.ac:175: -1- FLA_REQUIRE_GNU_MAKE
m4trace:configure.ac:175: -1- m4_pattern_allow([^fla_gnu_make_found$])
m4trace:configure.ac:178: -1- FLA_REQUIRE_GNU_BASH
m4trace:configure.ac:183: -1- FLA_CHECK_WITH_CC
m4trace:configure.ac:183: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_with_cc.m4:32: FLA_CHECK_WITH_CC is expanded from...
configure.ac:183: the top level])
m4trace:configure.ac:186: -1- FLA_REQUIRE_CC
m4trace:configure.ac:186: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:186: -1- m4_pattern_allow([^fla_userdef_cflags$])
m4trace:configure.ac:190: -1- FLA_CHECK_WITH_AR
m4trace:configure.ac:190: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_with_ar.m4:32: FLA_CHECK_WITH_AR is expanded from...
configure.ac:190: the top level])
m4trace:configure.ac:193: -1- FLA_REQUIRE_AR
m4trace:configure.ac:193: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:193: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:193: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:197: -1- FLA_CHECK_WITH_RANLIB
m4trace:configure.ac:197: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_with_ranlib.m4:32: FLA_CHECK_WITH_RANLIB is expanded from...
configure.ac:197: the top level])
m4trace:configure.ac:200: -1- FLA_REQUIRE_RANLIB
m4trace:configure.ac:200: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:200: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:200: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:203: -1- m4_pattern_allow([^INSTALL_PROGRAM$])
m4trace:configure.ac:203: -1- m4_pattern_allow([^INSTALL_SCRIPT$])
m4trace:configure.ac:203: -1- m4_pattern_allow([^INSTALL_DATA$])
m4trace:configure.ac:206: -1- FLA_REQUIRE_FIND
m4trace:configure.ac:206: -1- m4_pattern_allow([^FIND$])
m4trace:configure.ac:206: -1- m4_pattern_allow([^FIND$])
m4trace:configure.ac:209: -1- FLA_REQUIRE_XARGS
m4trace:configure.ac:209: -1- m4_pattern_allow([^XARGS$])
m4trace:configure.ac:209: -1- m4_pattern_allow([^XARGS$])
m4trace:configure.ac:212: -1- m4_pattern_allow([^LN_S$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:268: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:272: -1- m4_pattern_allow([^HAVE_IA64INTRIN_H$])
m4trace:configure.ac:278: -1- m4_pattern_allow([^HAVE_SYS_TIME_H$])
m4trace:configure.ac:284: -1- m4_pattern_allow([^TIME_WITH_SYS_TIME$])
m4trace:configure.ac:307: -1- m4_pattern_allow([^NO_MINUS_C_MINUS_O$])
m4trace:configure.ac:310: -1- m4_pattern_allow([^size_t$])
m4trace:configure.ac:313: -1- m4_pattern_allow([^const$])
m4trace:configure.ac:319: -1- m4_pattern_allow([^PROTOTYPES$])
m4trace:configure.ac:319: -1- m4_pattern_allow([^__PROTOTYPES$])
m4trace:configure.ac:328: -1- FLA_CHECK_ENABLE_VERBOSE_MAKE_OUTPUT
m4trace:configure.ac:328: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_verbose_make_output.m4:32: FLA_CHECK_ENABLE_VERBOSE_MAKE_OUTPUT is expanded from...
configure.ac:328: the top level])
m4trace:configure.ac:328: -1- m4_pattern_allow([^fla_enable_verbose_make_output$])
m4trace:configure.ac:331: -1- FLA_CHECK_ENABLE_STATIC_BUILD
m4trace:configure.ac:331: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_static_build.m4:32: FLA_CHECK_ENABLE_STATIC_BUILD is expanded from...
configure.ac:331: the top level])
m4trace:configure.ac:331: -1- m4_pattern_allow([^fla_enable_static_build$])
m4trace:configure.ac:334: -1- FLA_CHECK_ENABLE_DYNAMIC_BUILD
m4trace:configure.ac:334: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_dynamic_build.m4:32: FLA_CHECK_ENABLE_DYNAMIC_BUILD is expanded from...
configure.ac:334: the top level])
m4trace:configure.ac:334: -1- m4_pattern_allow([^fla_enable_dynamic_build$])
m4trace:configure.ac:339: -1- FLA_CHECK_ENABLE_MAX_ARG_LIST_HACK
m4trace:configure.ac:339: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_max_arg_list_hack.m4:32: FLA_CHECK_ENABLE_MAX_ARG_LIST_HACK is expanded from...
configure.ac:339: the top level])
m4trace:configure.ac:339: -1- m4_pattern_allow([^fla_enable_max_arg_list_hack$])
m4trace:configure.ac:345: -1- FLA_REQUIRE_STATIC_OR_DYNAMIC_BUILD
m4trace:configure.ac:349: -1- FLA_CHECK_WITH_EXTRA_CFLAGS
m4trace:configure.ac:349: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_with_extra_cflags.m4:32: FLA_CHECK_WITH_EXTRA_CFLAGS is expanded from...
configure.ac:349: the top level])
m4trace:configure.ac:349: -1- m4_pattern_allow([^EXTRA_CFLAGS$])
m4trace:configure.ac:349: -1- m4_pattern_allow([^fla_with_extra_cflags$])
m4trace:configure.ac:349: -1- m4_pattern_allow([^fla_extra_cflags$])
m4trace:configure.ac:352: -1- FLA_SET_C_PREPROC_FLAGS
m4trace:configure.ac:352: -1- m4_pattern_allow([^_GNU_SOURCE$])
m4trace:configure.ac:355: -1- FLA_SET_C_LANG_FLAGS
m4trace:configure.ac:355: -1- m4_pattern_allow([^fla_c_lang_flags$])
m4trace:configure.ac:364: -1- FLA_CHECK_ENABLE_NON_CRITICAL_CODE
m4trace:configure.ac:364: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_non_critical_code.m4:32: FLA_CHECK_ENABLE_NON_CRITICAL_CODE is expanded from...
configure.ac:364: the top level])
m4trace:configure.ac:364: -1- m4_pattern_allow([^FLA_ENABLE_NON_CRITICAL_CODE$])
m4trace:configure.ac:364: -1- m4_pattern_allow([^fla_enable_non_critical_code$])
m4trace:configure.ac:367: -1- FLA_CHECK_ENABLE_BUILTIN_BLAS
m4trace:configure.ac:367: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_builtin_blas.m4:32: FLA_CHECK_ENABLE_BUILTIN_BLAS is expanded from...
configure.ac:367: the top level])
m4trace:configure.ac:367: -1- m4_pattern_allow([^FLA_ENABLE_BUILTIN_BLAS$])
m4trace:configure.ac:367: -1- m4_pattern_allow([^fla_enable_builtin_blas$])
m4trace:configure.ac:371: -1- FLA_CHECK_ENABLE_LAPACK2FLAME
m4trace:configure.ac:371: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_lapack2flame.m4:32: FLA_CHECK_ENABLE_LAPACK2FLAME is expanded from...
configure.ac:371: the top level])
m4trace:configure.ac:371: -1- m4_pattern_allow([^FLA_ENABLE_LAPACK2FLAME$])
m4trace:configure.ac:371: -1- m4_pattern_allow([^fla_enable_lapack2flame$])
m4trace:configure.ac:375: -1- FLA_CHECK_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS
m4trace:configure.ac:375: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_external_lapack_for_subproblems.m4:32: FLA_CHECK_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS is expanded from...
configure.ac:375: the top level])
m4trace:configure.ac:375: -1- m4_pattern_allow([^FLA_ENABLE_EXTERNAL_LAPACK_FOR_SUBPROBLEMS$])
m4trace:configure.ac:375: -1- m4_pattern_allow([^fla_enable_external_lapack_for_subproblems$])
m4trace:configure.ac:379: -1- FLA_CHECK_ENABLE_EXTERNAL_LAPACK_INTERFACES
m4trace:configure.ac:379: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_external_lapack_interfaces.m4:32: FLA_CHECK_ENABLE_EXTERNAL_LAPACK_INTERFACES is expanded from...
configure.ac:379: the top level])
m4trace:configure.ac:379: -1- m4_pattern_allow([^FLA_ENABLE_EXTERNAL_LAPACK_INTERFACES$])
m4trace:configure.ac:379: -1- m4_pattern_allow([^fla_enable_external_lapack_interfaces$])
m4trace:configure.ac:383: -1- FLA_REQUIRE_NO_LAPACK_NAMESPACE_CONFLICT
m4trace:configure.ac:386: -1- FLA_CHECK_ENABLE_BLAS3_FRONT_END_CNTL_TREES
m4trace:configure.ac:386: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_blas3_front_end_cntl_trees.m4:32: FLA_CHECK_ENABLE_BLAS3_FRONT_END_CNTL_TREES is expanded from...
configure.ac:386: the top level])
m4trace:configure.ac:386: -1- m4_pattern_allow([^FLA_ENABLE_BLAS3_FRONT_END_CNTL_TREES$])
m4trace:configure.ac:386: -1- m4_pattern_allow([^fla_enable_blas3_front_end_cntl_trees$])
m4trace:configure.ac:389: -1- FLA_CHECK_ENABLE_MULTITHREADING
m4trace:configure.ac:389: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_multithreading.m4:32: FLA_CHECK_ENABLE_MULTITHREADING is expanded from...
configure.ac:389: the top level])
m4trace:configure.ac:389: -1- m4_pattern_allow([^FLA_ENABLE_MULTITHREADING$])
m4trace:configure.ac:389: -1- FLA_SET_C_OPENMP_FLAGS([])
m4trace:configure.ac:389: -1- m4_pattern_allow([^fla_c_openmp_flags$])
m4trace:configure.ac:389: -1- m4_pattern_allow([^FLA_MULTITHREADING_MODEL$])
m4trace:configure.ac:389: -1- m4_pattern_allow([^fla_enable_multithreading$])
m4trace:configure.ac:389: -1- m4_pattern_allow([^fla_multithreading_model$])
m4trace:configure.ac:392: -1- FLA_CHECK_ENABLE_SUPERMATRIX
m4trace:configure.ac:392: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_supermatrix.m4:32: FLA_CHECK_ENABLE_SUPERMATRIX is expanded from...
configure.ac:392: the top level])
m4trace:configure.ac:392: -1- m4_pattern_allow([^FLA_ENABLE_SUPERMATRIX$])
m4trace:configure.ac:392: -1- m4_pattern_allow([^fla_enable_supermatrix$])
m4trace:configure.ac:395: -1- FLA_CHECK_ENABLE_GPU
m4trace:configure.ac:395: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_gpu.m4:32: FLA_CHECK_ENABLE_GPU is expanded from...
configure.ac:395: the top level])
m4trace:configure.ac:395: -1- m4_pattern_allow([^FLA_ENABLE_GPU$])
m4trace:configure.ac:395: -1- m4_pattern_allow([^fla_enable_gpu$])
m4trace:configure.ac:399: -1- FLA_REQUIRE_SUPERMATRIX_ENABLED
m4trace:configure.ac:402: -1- FLA_CHECK_ENABLE_VECTOR_INTRINSICS
m4trace:configure.ac:402: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_vector_intrinsics.m4:32: FLA_CHECK_ENABLE_VECTOR_INTRINSICS is expanded from...
configure.ac:402: the top level])
m4trace:configure.ac:402: -1- m4_pattern_allow([^FLA_ENABLE_VECTOR_INTRINSICS$])
m4trace:configure.ac:402: -1- FLA_SET_C_SSE_FLAGS([])
m4trace:configure.ac:402: -1- m4_pattern_allow([^fla_c_sse_flags$])
m4trace:configure.ac:402: -1- m4_pattern_allow([^FLA_VECTOR_INTRINSIC_TYPE$])
m4trace:configure.ac:402: -1- m4_pattern_allow([^fla_enable_vector_intrinsics$])
m4trace:configure.ac:402: -1- m4_pattern_allow([^fla_vector_intrinsic_type$])
m4trace:configure.ac:405: -1- FLA_CHECK_ENABLE_MEMORY_ALIGNMENT
m4trace:configure.ac:405: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_memory_alignment.m4:32: FLA_CHECK_ENABLE_MEMORY_ALIGNMENT is expanded from...
configure.ac:405: the top level])
m4trace:configure.ac:405: -1- m4_pattern_allow([^FLA_ENABLE_MEMORY_ALIGNMENT$])
m4trace:configure.ac:405: -1- m4_pattern_allow([^FLA_MEMORY_ALIGNMENT_BOUNDARY$])
m4trace:configure.ac:405: -1- m4_pattern_allow([^fla_enable_memory_alignment$])
m4trace:configure.ac:405: -1- m4_pattern_allow([^fla_memory_alignment_boundary$])
m4trace:configure.ac:408: -1- FLA_CHECK_ENABLE_LDIM_ALIGNMENT
m4trace:configure.ac:408: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_ldim_alignment.m4:32: FLA_CHECK_ENABLE_LDIM_ALIGNMENT is expanded from...
configure.ac:408: the top level])
m4trace:configure.ac:408: -1- m4_pattern_allow([^FLA_ENABLE_LDIM_ALIGNMENT$])
m4trace:configure.ac:408: -1- m4_pattern_allow([^fla_enable_ldim_alignment$])
m4trace:configure.ac:411: -1- FLA_CHECK_ENABLE_OPTIMIZATIONS
m4trace:configure.ac:411: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_optimizations.m4:32: FLA_CHECK_ENABLE_OPTIMIZATIONS is expanded from...
configure.ac:411: the top level])
m4trace:configure.ac:411: -1- FLA_SET_C_OPT_FLAGS([$fla_enable_compiler_optimizations])
m4trace:configure.ac:411: -1- m4_pattern_allow([^fla_c_opt_flags$])
m4trace:configure.ac:411: -1- m4_pattern_allow([^fla_enable_compiler_optimizations$])
m4trace:configure.ac:414: -1- FLA_CHECK_ENABLE_WARNINGS
m4trace:configure.ac:414: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_warnings.m4:32: FLA_CHECK_ENABLE_WARNINGS is expanded from...
configure.ac:414: the top level])
m4trace:configure.ac:414: -1- FLA_SET_C_WARNING_FLAGS([$fla_enable_compiler_warnings])
m4trace:configure.ac:414: -1- m4_pattern_allow([^fla_c_warning_flags$])
m4trace:configure.ac:414: -1- m4_pattern_allow([^fla_enable_compiler_warnings$])
m4trace:configure.ac:417: -1- FLA_CHECK_ENABLE_DEBUG
m4trace:configure.ac:417: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_debug.m4:32: FLA_CHECK_ENABLE_DEBUG is expanded from...
configure.ac:417: the top level])
m4trace:configure.ac:417: -1- FLA_SET_C_DEBUG_FLAGS([$fla_enable_compiler_debug])
m4trace:configure.ac:417: -1- m4_pattern_allow([^fla_c_debug_flags$])
m4trace:configure.ac:417: -1- m4_pattern_allow([^fla_enable_compiler_debug$])
m4trace:configure.ac:420: -1- FLA_CHECK_ENABLE_PROFILING
m4trace:configure.ac:420: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_profiling.m4:32: FLA_CHECK_ENABLE_PROFILING is expanded from...
configure.ac:420: the top level])
m4trace:configure.ac:420: -1- FLA_SET_C_PROF_FLAGS([$fla_enable_compiler_profiling])
m4trace:configure.ac:420: -1- m4_pattern_allow([^fla_c_prof_flags$])
m4trace:configure.ac:420: -1- m4_pattern_allow([^fla_enable_compiler_profiling$])
m4trace:configure.ac:423: -1- FLA_CHECK_ENABLE_INTERNAL_ERROR_CHECKING
m4trace:configure.ac:423: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_internal_error_checking.m4:32: FLA_CHECK_ENABLE_INTERNAL_ERROR_CHECKING is expanded from...
configure.ac:423: the top level])
m4trace:configure.ac:423: -1- m4_pattern_allow([^FLA_ENABLE_INTERNAL_ERROR_CHECKING$])
m4trace:configure.ac:423: -1- m4_pattern_allow([^FLA_INTERNAL_ERROR_CHECKING_LEVEL$])
m4trace:configure.ac:423: -1- m4_pattern_allow([^fla_enable_internal_error_checking$])
m4trace:configure.ac:423: -1- m4_pattern_allow([^fla_internal_error_checking_level$])
m4trace:configure.ac:426: -1- FLA_CHECK_ENABLE_MEMORY_LEAK_COUNTER
m4trace:configure.ac:426: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_memory_leak_counter.m4:32: FLA_CHECK_ENABLE_MEMORY_LEAK_COUNTER is expanded from...
configure.ac:426: the top level])
m4trace:configure.ac:426: -1- m4_pattern_allow([^FLA_ENABLE_MEMORY_LEAK_COUNTER$])
m4trace:configure.ac:426: -1- m4_pattern_allow([^fla_enable_memory_leak_counter$])
m4trace:configure.ac:430: -1- FLA_CHECK_ENABLE_BLIS_USE_OF_FLA_MALLOC
m4trace:configure.ac:430: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_blis_use_of_fla_malloc.m4:32: FLA_CHECK_ENABLE_BLIS_USE_OF_FLA_MALLOC is expanded from...
configure.ac:430: the top level])
m4trace:configure.ac:430: -1- m4_pattern_allow([^FLA_ENABLE_BLIS_USE_OF_FLA_MALLOC$])
m4trace:configure.ac:430: -1- m4_pattern_allow([^fla_enable_blis_use_of_fla_malloc$])
m4trace:configure.ac:434: -1- FLA_CHECK_ENABLE_GOTO_INTERFACES
m4trace:configure.ac:434: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_goto_interfaces.m4:32: FLA_CHECK_ENABLE_GOTO_INTERFACES is expanded from...
configure.ac:434: the top level])
m4trace:configure.ac:434: -1- m4_pattern_allow([^FLA_ENABLE_GOTO_INTERFACES$])
m4trace:configure.ac:434: -1- m4_pattern_allow([^fla_enable_goto_interfaces$])
m4trace:configure.ac:437: -1- FLA_CHECK_ENABLE_CBLAS_INTERFACES
m4trace:configure.ac:437: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_cblas_interfaces.m4:32: FLA_CHECK_ENABLE_CBLAS_INTERFACES is expanded from...
configure.ac:437: the top level])
m4trace:configure.ac:437: -1- m4_pattern_allow([^FLA_ENABLE_CBLAS_INTERFACES$])
m4trace:configure.ac:437: -1- m4_pattern_allow([^fla_enable_cblas_interfaces$])
m4trace:configure.ac:440: -1- FLA_CHECK_ENABLE_DEFAULT_M_BLOCKSIZE
m4trace:configure.ac:440: -1- m4_pattern_allow([^FLA_DEFAULT_M_BLOCKSIZE$])
m4trace:configure.ac:440: -1- m4_pattern_allow([^fla_enable_default_m_blocksize$])
m4trace:configure.ac:440: -1- m4_pattern_allow([^fla_default_m_blocksize$])
m4trace:configure.ac:441: -1- FLA_CHECK_ENABLE_DEFAULT_K_BLOCKSIZE
m4trace:configure.ac:441: -1- m4_pattern_allow([^FLA_DEFAULT_K_BLOCKSIZE$])
m4trace:configure.ac:441: -1- m4_pattern_allow([^fla_enable_default_k_blocksize$])
m4trace:configure.ac:441: -1- m4_pattern_allow([^fla_default_k_blocksize$])
m4trace:configure.ac:442: -1- FLA_CHECK_ENABLE_DEFAULT_N_BLOCKSIZE
m4trace:configure.ac:442: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_default_n_blocksize.m4:32: FLA_CHECK_ENABLE_DEFAULT_N_BLOCKSIZE is expanded from...
configure.ac:442: the top level])
m4trace:configure.ac:442: -1- m4_pattern_allow([^FLA_DEFAULT_N_BLOCKSIZE$])
m4trace:configure.ac:442: -1- m4_pattern_allow([^fla_enable_default_n_blocksize$])
m4trace:configure.ac:442: -1- m4_pattern_allow([^fla_default_n_blocksize$])
m4trace:configure.ac:447: -1- FLA_CHECK_ENABLE_PORTABLE_TIMER
m4trace:configure.ac:447: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_portable_timer.m4:32: FLA_CHECK_ENABLE_PORTABLE_TIMER is expanded from...
configure.ac:447: the top level])
m4trace:configure.ac:447: -1- m4_pattern_allow([^FLA_ENABLE_PORTABLE_TIMER$])
m4trace:configure.ac:447: -1- m4_pattern_allow([^FLA_PORTABLE_TIMER_IS_CLOCK_GETTIME$])
m4trace:configure.ac:447: -1- m4_pattern_allow([^FLA_PORTABLE_TIMER_IS_GETTIMEOFDAY$])
m4trace:configure.ac:447: -1- m4_pattern_allow([^FLA_PORTABLE_TIMER_IS_UNKNOWN$])
m4trace:configure.ac:447: -1- m4_pattern_allow([^fla_enable_portable_timer$])
m4trace:configure.ac:447: -1- m4_pattern_allow([^fla_portable_timer_function$])
m4trace:configure.ac:451: -1- FLA_CHECK_ENABLE_WINDOWS_BUILD
m4trace:configure.ac:451: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_windows_build.m4:32: FLA_CHECK_ENABLE_WINDOWS_BUILD is expanded from...
configure.ac:451: the top level])
m4trace:configure.ac:451: -1- m4_pattern_allow([^FLA_ENABLE_WINDOWS_BUILD$])
m4trace:configure.ac:451: -1- m4_pattern_allow([^fla_enable_windows_build$])
m4trace:configure.ac:454: -1- FLA_CHECK_ENABLE_SCC
m4trace:configure.ac:454: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_scc.m4:32: FLA_CHECK_ENABLE_SCC is expanded from...
configure.ac:454: the top level])
m4trace:configure.ac:454: -1- m4_pattern_allow([^FLA_ENABLE_SCC$])
m4trace:configure.ac:454: -1- m4_pattern_allow([^fla_enable_scc$])
m4trace:configure.ac:457: -1- FLA_CHECK_ENABLE_TIDSP
m4trace:configure.ac:457: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
build/ac-macros/fla_check_enable_tidsp.m4:32: FLA_CHECK_ENABLE_TIDSP is expanded from...
configure.ac:457: the top level])
m4trace:configure.ac:457: -1- m4_pattern_allow([^FLA_ENABLE_TIDSP$])
m4trace:configure.ac:457: -1- m4_pattern_allow([^fla_enable_tidsp$])
m4trace:configure.ac:466: -1- m4_pattern_allow([^fla_blis_flags$])
m4trace:configure.ac:474: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:480: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:486: -1- m4_pattern_allow([^HAVE_LIBM$])
m4trace:configure.ac:487: -1- m4_pattern_allow([^HAVE_LIBM$])
m4trace:configure.ac:488: -1- m4_pattern_allow([^HAVE_LIBM$])
m4trace:configure.ac:502: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:502: -1- m4_pattern_allow([^LTLIBOBJS$])
